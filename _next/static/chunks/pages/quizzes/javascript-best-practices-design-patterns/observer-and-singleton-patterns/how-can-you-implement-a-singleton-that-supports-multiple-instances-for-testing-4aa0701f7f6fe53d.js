(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[23063],{91661:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/observer-and-singleton-patterns/how-can-you-implement-a-singleton-that-supports-multiple-instances-for-testing",function(){return t(89963)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return o}});var s=t(85893),a=t(67294),i=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",adFormat:i="auto",className:o,fullWidthResponsive:c="true",style:l={}}=e,r=(0,a.useRef)(null),d=(0,a.useRef)(!1),[u,p]=(0,a.useState)(!1);return((0,a.useEffect)(()=>(p(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,a.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))r.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{r.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[u]),u)?(0,s.jsx)("ins",{ref:r,className:"adsbygoogle ".concat(o),style:{display:"block",...l},"data-ad-client":n,"data-ad-slot":t,"data-ad-format":i,"data-full-width-responsive":c}):null};function o(e){return class extends a.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(i,{adSlot:"6208304795",className:"h-[100px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},89963:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return c}});var s=t(85893),a=t(1475),i=t(25190),o=t(16833),c=!0;n.default=(0,i.Z)((0,o.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Observer & Singleton Patterns"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(a.Y3,{activeQuestionIndex:12,totalQuestions:15,index:12,question:"How can you implement a Singleton that supports multiple instances for testing?",options:["Create multiple classes","Remove singleton behavior","Use dependency injection","Implement instance management with keys"],code:"class TestableSingleton {\n  static #instances = new Map();\n  #state;\n\n  constructor(key = 'default') {\n    const existingInstance = TestableSingleton.#instances.get(key);\n    if (existingInstance) {\n      return existingInstance;\n    }\n\n    this.#state = {};\n    TestableSingleton.#instances.set(key, this);\n  }\n\n  static getInstance(key = 'default') {\n    if (!TestableSingleton.#instances.has(key)) {\n      new TestableSingleton(key);\n    }\n    return TestableSingleton.#instances.get(key);\n  }\n\n  static resetInstances() {\n    TestableSingleton.#instances.clear();\n  }\n}",nextQuestionPath:"what-is-the-proper-way-to-handle-memory-management-in-the-observer-pattern",correctAnswer:4,explanation:"This implementation provides a testable Singleton by: 1) Using a Map to manage multiple named instances, 2) Providing a way to create isolated instances for testing, 3) Maintaining singleton behavior within each key scope, and 4) Including a reset mechanism for test cleanup. This approach maintains the benefits of the Singleton pattern while improving testability.",id:1453,quizId:64},12)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=91661)}),_N_E=e.O()}]);