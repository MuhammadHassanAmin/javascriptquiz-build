(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[29702],{31681:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-in-the-browser/intersection-observer-and-efficient-scroll-handling/what-is-the-best-way-to-implement-scroll-based-infinite-image-galleries",function(){return s(65038)}])},16833:function(e,n,s){"use strict";s.d(n,{Z:function(){return o}});var t=s(85893),r=s(67294),i=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:s="6753219060",className:i}=e,o=(0,r.useRef)(null),a=(0,r.useRef)(!1),[l,c]=(0,r.useState)(!1);return((0,r.useEffect)(()=>(c(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,r.useEffect)(()=>{if(l){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))o.current&&!a.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),a.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{o.current&&!a.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),a.current=!0)}}}},[l]),l)?(0,t.jsx)("ins",{ref:o,className:"adsbygoogle ".concat(i),style:{display:"block"},"data-ad-client":n,"data-ad-slot":s}):null};function o(e){return class extends r.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,t.jsx)("div",{children:(0,t.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,t.jsx)("div",{children:(0,t.jsx)(e,{...this.props})}),(0,t.jsx)("div",{children:(0,t.jsx)(i,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},65038:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return a}});var t=s(85893),r=s(1475),i=s(41354),o=s(16833),a=!0;n.default=(0,i.Z)((0,o.Z)(()=>(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Intersection Observer & Efficient Scroll Handling"}),(0,t.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,t.jsx)(r.Y3,{activeQuestionIndex:17,totalQuestions:20,index:17,question:"What is the best way to implement scroll-based infinite image galleries?",options:["Load all images at once","Use scroll event listeners","Preload entire gallery","Use Intersection Observer with preload margin"],code:"const galleryObserver = new IntersectionObserver((entries) => {\n  entries.forEach(entry => {\n    if (entry.isIntersecting && !isLoading) {\n      isLoading = true;\n      loadMoreImages()\n        .then(images => {\n          appendImages(images);\n          isLoading = false;\n        })\n        .catch(error => {\n          console.error('Failed to load images:', error);\n          isLoading = false;\n        });\n    }\n  });\n}, {\n  root: null,\n  rootMargin: '200px 0px',\n  threshold: 0\n});",nextQuestionPath:"how-can-you-optimize-scroll-performance-in-long-lists-or-tables",correctAnswer:4,explanation:"Using Intersection Observer for infinite image galleries is optimal because: 1) rootMargin allows preloading before images are needed, creating a seamless experience, 2) The loading state prevents multiple simultaneous requests, 3) Error handling ensures robustness, 4) Performance is maintained even with large galleries. The code shows proper implementation with preloading margin, loading states, and error handling for a smooth infinite gallery experience.",id:1690,quizId:75},17)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=31681)}),_N_E=e.O()}]);