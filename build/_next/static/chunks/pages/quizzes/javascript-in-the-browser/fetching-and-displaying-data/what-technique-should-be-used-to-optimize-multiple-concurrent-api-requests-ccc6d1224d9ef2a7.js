(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[62151],{98012:function(e,t,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-in-the-browser/fetching-and-displaying-data/what-technique-should-be-used-to-optimize-multiple-concurrent-api-requests",function(){return s(2799)}])},16833:function(e,t,s){"use strict";s.d(t,{Z:function(){return o}});var a=s(85893),n=s(67294),i=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:s="6753219060",className:i}=e,o=(0,n.useRef)(null),r=(0,n.useRef)(!1),[l,c]=(0,n.useState)(!1);return((0,n.useEffect)(()=>(c(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,n.useEffect)(()=>{if(l){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))o.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{o.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0)}}}},[l]),l)?(0,a.jsx)("ins",{ref:o,className:"adsbygoogle ".concat(i),style:{display:"block"},"data-ad-client":t,"data-ad-slot":s}):null};function o(e){return class extends n.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,a.jsx)("div",{children:(0,a.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,a.jsx)("div",{children:(0,a.jsx)(e,{...this.props})}),(0,a.jsx)("div",{children:(0,a.jsx)(i,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},2799:function(e,t,s){"use strict";s.r(t),s.d(t,{__N_SSG:function(){return r}});var a=s(85893),n=s(1475),i=s(41354),o=s(16833),r=!0;t.default=(0,i.Z)((0,o.Z)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Fetching & Displaying Data"}),(0,a.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,a.jsx)(n.Y3,{activeQuestionIndex:5,totalQuestions:20,index:5,question:"What technique should be used to optimize multiple concurrent API requests?",options:["Sequential requests using async/await","Using setTimeout for each request","Parallel requests with Promise.all","Multiple separate fetch calls"],code:"async function fetchDashboardData() {\n  const [userData, postsData, analyticsData] = await Promise.all([\n    fetch('/api/user').then(r => r.json()),\n    fetch('/api/posts').then(r => r.json()),\n    fetch('/api/analytics').then(r => r.json())\n  ]);\n  \n  updateDashboard({ userData, postsData, analyticsData });\n}",nextQuestionPath:"what-s-the-importance-of-implementing-loading-states-when-fetching-data",correctAnswer:3,explanation:"Promise.all is the optimal way to handle multiple concurrent requests because: 1) It executes requests in parallel, reducing total wait time, 2) Provides a clean way to wait for all requests to complete, 3) Maintains an array of results in the same order as the requests, 4) Fails fast if any request fails (which can be handled with Promise.allSettled if partial success is acceptable). This approach is particularly useful for loading dashboard-style UIs where multiple data sources need to be fetched simultaneously.",id:1601,quizId:71},5)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=98012)}),_N_E=e.O()}]);