(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[27672],{33132:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-in-the-browser/fetching-and-displaying-data/what-is-the-best-practice-for-handling-network-errors-in-data-fetching",function(){return n(39642)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var r=n(85893),s=n(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:o="auto",className:i,fullWidthResponsive:a="true"}=e,c=(0,s.useRef)(null),l=(0,s.useRef)(!1),[d,u]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(u(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))c.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{c.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[d]),d)?(0,r.jsx)("ins",{ref:c,className:"adsbygoogle ".concat(i),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":o,"data-full-width-responsive":a}):null};function i(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,r.jsx)("div",{children:(0,r.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,r.jsx)("div",{children:(0,r.jsx)(e,{...this.props})}),(0,r.jsx)("div",{children:(0,r.jsx)(o,{adSlot:"6208304795",className:"h-[300px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},39642:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return a}});var r=n(85893),s=n(1475),o=n(25190),i=n(16833),a=!0;t.default=(0,o.Z)((0,i.Z)(()=>(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Fetching & Displaying Data"}),(0,r.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,r.jsx)(s.Y3,{activeQuestionIndex:9,totalQuestions:20,index:9,question:"What is the best practice for handling network errors in data fetching?",options:["Ignore network errors","Always reload the page","Only show error messages","Implement retry logic with exponential backoff"],code:"async function fetchWithRetry(url, options = {}, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      const response = await fetch(url, options);\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return await response.json();\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n      await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));\n    }\n  }\n}",nextQuestionPath:"what-technique-should-be-used-to-optimize-data-fetching-for-frequently-accessed-resources",correctAnswer:4,explanation:"Proper network error handling should include: 1) Implementing retry logic with exponential backoff for transient failures, 2) Displaying user-friendly error messages, 3) Providing recovery options when possible, 4) Logging errors for debugging. Additional best practices include:\n- Differentiating between different types of errors (network, server, validation)\n- Preserving user input during retries\n- Implementing offline support where appropriate\n- Maintaining consistent error handling across the application",id:1605,quizId:71},9)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=33132)}),_N_E=e.O()}]);