(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[80066],{9619:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-in-the-browser/websockets-real-time-communication/how-should-websocket-error-handling-be-implemented-in-production-applications",function(){return t(51154)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return i}});var o=t(85893),r=t(67294),s=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",adFormat:s="auto",className:i,fullWidthResponsive:c="true",style:a={}}=e,l=(0,r.useRef)(null),d=(0,r.useRef)(!1),[u,h]=(0,r.useState)(!1);return((0,r.useEffect)(()=>(h(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,r.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[u]),u)?(0,o.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(i),style:{display:"block",...a},"data-ad-client":n,"data-ad-slot":t,"data-ad-format":s,"data-full-width-responsive":c}):null};function i(e){return class extends r.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,o.jsx)("div",{children:(0,o.jsx)(s,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,o.jsx)("div",{children:(0,o.jsx)(e,{...this.props})}),(0,o.jsxs)("div",{children:[(0,o.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,o.jsx)(s,{adSlot:"6208304795",className:"h-[336px]",style:{display:"block",width:"100%",height:"336px"}})}),(0,o.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,o.jsx)(s,{adSlot:"6208304795",className:"h-[336px]",style:{display:"block",width:"100%",height:"336px"}})})]})]})})}constructor(e){super(e)}}}},51154:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return c}});var o=t(85893),r=t(1475),s=t(25190),i=t(16833),c=!0;n.default=(0,s.Z)((0,i.Z)(()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"WebSockets & Real-Time Communication"}),(0,o.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,o.jsx)(r.Y3,{activeQuestionIndex:9,totalQuestions:17,index:9,question:"How should WebSocket error handling be implemented in production applications?",options:["Only log errors to console","Ignore all errors","Implement comprehensive error handling with recovery","Always reload the page"],code:"class WebSocketHandler {\n    constructor(url) {\n        this.url = url;\n        this.reconnectAttempts = 0;\n        this.connect();\n    }\n\n    connect() {\n        this.ws = new WebSocket(this.url);\n        this.setupErrorHandling();\n    }\n\n    setupErrorHandling() {\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n            this.handleError(error);\n        };\n\n        this.ws.onclose = (event) => {\n            if (!event.wasClean) {\n                this.handleError(new Error(`Connection closed abnormally, code: ${event.code}`));\n            }\n        };\n    }\n\n    handleError(error) {\n        // Log to monitoring service\n        this.logError(error);\n\n        // Attempt reconnection with backoff\n        if (this.shouldReconnect()) {\n            this.scheduleReconnection();\n        }\n\n        // Notify application of error state\n        this.emit('error', error);\n    }\n}",nextQuestionPath:"what-should-be-considered-when-implementing-websocket-message-queuing",correctAnswer:3,explanation:"Production WebSocket error handling should include: 1) Comprehensive error detection and classification, 2) Structured error logging and monitoring, 3) Intelligent reconnection strategies with backoff, 4) User notification mechanisms, 5) Resource cleanup on errors, 6) Circuit breaker implementation for persistent issues, 7) Error reporting to monitoring services, 8) Fallback mechanisms when appropriate. The code demonstrates a robust error handling implementation with proper separation of concerns and recovery strategies.",id:1645,quizId:73},9)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=9619)}),_N_E=e.O()}]);