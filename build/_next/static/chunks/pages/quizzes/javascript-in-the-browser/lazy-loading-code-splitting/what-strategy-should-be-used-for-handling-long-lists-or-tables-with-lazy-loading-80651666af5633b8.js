(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[81083],{40152:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-in-the-browser/lazy-loading-code-splitting/what-strategy-should-be-used-for-handling-long-lists-or-tables-with-lazy-loading",function(){return n(52458)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return l}});var i=n(85893),s=n(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",className:o}=e,l=(0,s.useRef)(null),a=(0,s.useRef)(!1),[r,d]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(d(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(r){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!a.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),a.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!a.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),a.current=!0)}}}},[r]),r)?(0,i.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(o),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n}):null};function l(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,i.jsx)("div",{children:(0,i.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,i.jsx)("div",{children:(0,i.jsx)(e,{...this.props})}),(0,i.jsx)("div",{children:(0,i.jsx)(o,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},52458:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return a}});var i=n(85893),s=n(1475),o=n(41354),l=n(16833),a=!0;t.default=(0,o.Z)((0,l.Z)(()=>(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Lazy Loading & Code Splitting"}),(0,i.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,i.jsx)(s.Y3,{activeQuestionIndex:15,totalQuestions:20,index:15,question:"What strategy should be used for handling long lists or tables with lazy loading?",options:["Load all items at once","Implement infinite scroll without virtualization","Use virtualization with windowing technique","Display only first 10 items"],code:"function VirtualList({ items, rowHeight, visibleRows }) {\n  const [scrollTop, setScrollTop] = useState(0);\n  const startIndex = Math.floor(scrollTop / rowHeight);\n  const visibleItems = items.slice(startIndex, startIndex + visibleRows);\n\n  return (\n    <div onScroll={e => setScrollTop(e.target.scrollTop)}\n         style={{ height: visibleRows * rowHeight }}>\n      <div style={{ height: items.length * rowHeight,\n                    paddingTop: startIndex * rowHeight }}>\n        {visibleItems.map(item => (\n          <div style={{ height: rowHeight }}>\n            {item.content}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}",nextQuestionPath:"what-issue-should-you-be-aware-of-when-implementing-code-splitting-in-a-server-side-rendered-application",correctAnswer:3,explanation:"Virtualization with windowing technique is the best strategy for handling long lists because: 1) It maintains smooth scrolling performance by rendering only visible items, 2) Reduces memory usage by not keeping all DOM nodes in memory, 3) Provides seamless user experience with proper scroll position management, 4) Scales well with large datasets. The example demonstrates key aspects of virtualization: calculating visible items based on scroll position, maintaining proper scroll container height, and efficient item rendering. This approach is particularly important for web applications dealing with large datasets or infinite scrolling implementations.",id:1571,quizId:69},15)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=40152)}),_N_E=e.O()}]);