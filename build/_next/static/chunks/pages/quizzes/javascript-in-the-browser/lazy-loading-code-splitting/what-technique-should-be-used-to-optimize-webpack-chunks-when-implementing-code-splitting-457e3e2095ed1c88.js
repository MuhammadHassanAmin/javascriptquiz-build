(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[78159],{36816:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-in-the-browser/lazy-loading-code-splitting/what-technique-should-be-used-to-optimize-webpack-chunks-when-implementing-code-splitting",function(){return t(32494)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return a}});var i=t(85893),s=t(67294),o=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",className:o}=e,a=(0,s.useRef)(null),r=(0,s.useRef)(!1),[c,u]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(u(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(c){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))a.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{a.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0)}}}},[c]),c)?(0,i.jsx)("ins",{ref:a,className:"adsbygoogle ".concat(o),style:{display:"block"},"data-ad-client":n,"data-ad-slot":t}):null};function a(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,i.jsx)("div",{children:(0,i.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,i.jsx)("div",{children:(0,i.jsx)(e,{...this.props})}),(0,i.jsx)("div",{children:(0,i.jsx)(o,{adSlot:"6208304795",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},32494:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return r}});var i=t(85893),s=t(1475),o=t(25190),a=t(16833),r=!0;n.default=(0,o.Z)((0,a.Z)(()=>(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Lazy Loading & Code Splitting"}),(0,i.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,i.jsx)(s.Y3,{activeQuestionIndex:8,totalQuestions:20,index:8,question:"What technique should be used to optimize webpack chunks when implementing code splitting?",options:["Disable chunk optimization completely","Use a single large chunk","Configure splitChunks with appropriate parameters","Merge all chunks into the main bundle"],code:"module.exports = {\n  optimization: {\n    splitChunks: {\n      chunks: 'all',\n      minSize: 20000,\n      maxSize: 70000,\n      cacheGroups: {\n        vendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10\n        },\n        default: {\n          minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true\n        }\n      }\n    }\n  }\n};",nextQuestionPath:"what-is-the-purpose-of-using-preload-hints-with-lazy-loading",correctAnswer:3,explanation:"Configuring splitChunks with appropriate parameters is crucial for optimal code splitting because: 1) It allows fine-tuning of chunk sizes and generation rules, 2) Enables efficient handling of common dependencies through cacheGroups, 3) Optimizes caching by separating vendor and application code, 4) Prevents chunk duplication through reuseExistingChunk. The configuration shown demonstrates best practices like: setting minimum and maximum chunk sizes, separating vendor code, and reusing existing chunks where possible. This leads to better load performance and more efficient caching strategies.",id:1564,quizId:69},8)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=36816)}),_N_E=e.O()}]);