(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[18517],{22791:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-in-the-browser/lazy-loading-code-splitting/what-approach-should-be-used-for-loading-polyfills-in-a-code-split-application",function(){return n(52577)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return s}});var o=n(85893),i=n(67294),a=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:a="auto",className:s,fullWidthResponsive:l="true"}=e,r=(0,i.useRef)(null),d=(0,i.useRef)(!1),[c,p]=(0,i.useState)(!1);return((0,i.useEffect)(()=>(p(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,i.useEffect)(()=>{if(c){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))r.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{r.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[c]),c)?(0,o.jsx)("ins",{ref:r,className:"adsbygoogle ".concat(s),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":a,"data-full-width-responsive":l}):null};function s(e){return class extends i.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,o.jsx)("div",{children:(0,o.jsx)(a,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,o.jsx)("div",{children:(0,o.jsx)(e,{...this.props})}),(0,o.jsx)("div",{children:(0,o.jsx)(a,{adSlot:"6208304795",className:"h-[300px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},52577:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return l}});var o=n(85893),i=n(1475),a=n(25190),s=n(16833),l=!0;t.default=(0,a.Z)((0,s.Z)(()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Lazy Loading & Code Splitting"}),(0,o.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,o.jsx)(i.Y3,{activeQuestionIndex:18,totalQuestions:20,index:18,question:"What approach should be used for loading polyfills in a code-split application?",options:["Load all polyfills upfront","Never use polyfills","Load polyfills conditionally based on feature detection","Ignore browser compatibility"],code:"async function loadApp() {\n  if (!window.IntersectionObserver) {\n    await import('intersection-observer');\n  }\n  if (!window.fetch) {\n    await import('whatwg-fetch');\n  }\n  const app = await import('./app');\n  app.init();\n}",nextQuestionPath:"what-technique-should-be-used-for-handling-translations-in-a-lazy-loaded-application",correctAnswer:3,explanation:"Loading polyfills conditionally based on feature detection is the most efficient approach because: 1) It only loads polyfills when they're actually needed for the browser, 2) Reduces unnecessary code for modern browsers that don't need polyfills, 3) Maintains compatibility while optimizing performance, 4) Can be combined with code splitting for optimal loading strategy. The example demonstrates proper feature detection and conditional loading of polyfills before initializing the application, ensuring both compatibility and performance are maintained.",id:1574,quizId:69},18)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=22791)}),_N_E=e.O()}]);