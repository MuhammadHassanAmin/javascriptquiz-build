(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[44867],{90778:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-in-the-browser/dom-rendering-performance/what-performance-issue-does-this-code-pattern-cause",function(){return n(8946)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var s=n(85893),o=n(67294),r=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:r="auto",className:a,fullWidthResponsive:i="true"}=e,c=(0,o.useRef)(null),d=(0,o.useRef)(!1),[l,u]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(u(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(l){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))c.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{c.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[l]),l)?(0,s.jsx)("ins",{ref:c,className:"adsbygoogle ".concat(a),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":r,"data-full-width-responsive":i}):null};function a(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(r,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(r,{adSlot:"6208304795",className:"h-[300px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},8946:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return i}});var s=n(85893),o=n(1475),r=n(25190),a=n(16833),i=!0;t.default=(0,r.Z)((0,a.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"DOM Rendering Performance"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(o.Y3,{activeQuestionIndex:1,totalQuestions:20,index:1,question:"What performance issue does this code pattern cause?",options:["Memory leaks","Forced synchronous layout","Event listener overhead","DOM memory fragmentation"],code:"const element = document.getElementById('myElement');\nfor (let i = 0; i < 100; i++) {\n  element.style.width = `${i}px`;\n  console.log(element.offsetWidth);\n}",nextQuestionPath:"which-approach-provides-the-best-rendering-performance-for-animating-element-properties",correctAnswer:2,explanation:"This code causes forced synchronous layout (layout thrashing) by repeatedly writing to and then reading layout properties in a loop. Each iteration: 1) Changes the width (triggering a style change), 2) Immediately reads offsetWidth (forcing the browser to compute layout). This creates a read/write cycle that prevents the browser from batching layout calculations, severely impacting performance. To optimize, separate reads and writes: first read all necessary values, then perform all updates. A better approach would be to perform all style changes first, then read layout properties if needed.",id:1537,quizId:68},1)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=90778)}),_N_E=e.O()}]);