(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[88647],{3706:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-in-the-browser/dom-rendering-performance/what-potential-performance-issue-exists-with-this-mutationobserver-usage",function(){return t(96670)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return d}});var s=t(85893),o=t(67294),a=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",className:a}=e,d=(0,o.useRef)(null),r=(0,o.useRef)(!1),[i,c]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(c(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(i){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))d.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{d.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0)}}}},[i]),i)?(0,s.jsx)("ins",{ref:d,className:"adsbygoogle ".concat(a),style:{display:"block"},"data-ad-client":n,"data-ad-slot":t}):null};function d(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"6208304795",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},96670:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return r}});var s=t(85893),o=t(1475),a=t(25190),d=t(16833),r=!0;n.default=(0,a.Z)((0,d.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"DOM Rendering Performance"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(o.Y3,{activeQuestionIndex:16,totalQuestions:20,index:16,question:"What potential performance issue exists with this MutationObserver usage?",options:["Incorrect mutation type","Memory leak in closure","Excessive style recalculation","Wrong transition timing"],code:"const observer = new MutationObserver(mutations => {\n  mutations.forEach(mutation => {\n    mutation.addedNodes.forEach(node => {\n      if (node.nodeType === 1) {\n        node.style.opacity = '0';\n        requestAnimationFrame(() => {\n          node.style.transition = 'opacity 0.3s';\n          node.style.opacity = '1';\n        });\n      }\n    });\n  });\n});\n\nobserver.observe(document.body, { childList: true, subtree: true });",nextQuestionPath:"how-can-rendering-performance-be-improved-when-working-with-large-tables",correctAnswer:3,explanation:"This code can cause excessive style recalculation because: 1) It triggers style changes for every added DOM node, 2) Creates forced synchronous layout when reading styles immediately after changes, 3) May cause unnecessary reflows when many nodes are added simultaneously, 4) Doesn't batch style updates efficiently. To optimize:\n\nconst observer = new MutationObserver(mutations => {\n  const addedNodes = [];\n  mutations.forEach(mutation => {\n    mutation.addedNodes.forEach(node => {\n      if (node.nodeType === 1) addedNodes.push(node);\n    });\n  });\n  \n  if (addedNodes.length) {\n    addedNodes.forEach(node => node.classList.add('hidden'));\n    requestAnimationFrame(() => {\n      addedNodes.forEach(node => node.classList.add('fade-in'));\n    });\n  }\n});\n\n// CSS\n.hidden { opacity: 0; }\n.fade-in { \n  opacity: 1; \n  transition: opacity 0.3s;\n}",id:1552,quizId:68},16)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=3706)}),_N_E=e.O()}]);