(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[45770],{58213:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/asynchronous-javascript/promise-static-methods/what-advanced-promise-pattern-is-implemented",function(){return t(74529)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return o}});var s=t(85893),r=t(67294),i=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",adFormat:i="auto",className:o,fullWidthResponsive:a="true",style:c={}}=e,l=(0,r.useRef)(null),u=(0,r.useRef)(!1),[d,m]=(0,r.useState)(!1);return((0,r.useEffect)(()=>(m(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,r.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!u.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),u.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!u.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),u.current=!0)}}}},[d]),d)?(0,s.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(o),style:{display:"block",...c},"data-ad-client":n,"data-ad-slot":t,"data-ad-format":i,"data-full-width-responsive":a}):null};function o(e){return class extends r.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(i,{adSlot:"6208304795",className:"h-[336px] top-0 sticky",style:{display:"inline-block",height:"280px"}})})]})})}constructor(e){super(e)}}}},74529:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return a}});var s=t(85893),r=t(1475),i=t(25190),o=t(16833),a=!0;n.default=(0,i.Z)((0,o.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Promise.all(), Promise.race(), and Promise.any()"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(r.Y3,{activeQuestionIndex:13,totalQuestions:20,index:13,question:"What advanced promise pattern is implemented?",options:["Basic promise chaining","Sequential execution","Concurrent limit control","Simple error handling"],code:"function concurrent(tasks, limit) {\n  const results = new Array(tasks.length);\n  let running = 0;\n  let index = 0;\n\n  return new Promise((resolve, reject) => {\n    function next() {\n      if (index === tasks.length && running === 0) {\n        resolve(results);\n        return;\n      }\n\n      while (running < limit && index < tasks.length) {\n        const i = index++;\n        running++;\n        Promise.resolve(tasks[i]())\n          .then(result => {\n            results[i] = result;\n            running--;\n            next();\n          })\n          .catch(reject);\n      }\n    }\n    next();\n  });\n}",nextQuestionPath:"what-s-the-key-difference-between-promise-race-and-promise-any",correctAnswer:3,explanation:"This implements concurrent limit control: 1) Manages maximum number of concurrent promises, 2) Maintains order of results, 3) Starts new tasks as others complete, 4) Prevents resource exhaustion, 5) Useful for rate-limited APIs, 6) Common in task queue implementations.",id:647,quizId:30},13)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=58213)}),_N_E=e.O()}]);