(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[72881],{72359:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/object-oriented-javascript/es6-classes-and-constructors/what-oop-principle-is-demonstrated-here",function(){return n(8740)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var s=n(85893),i=n(67294),a=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:a="auto",className:o,fullWidthResponsive:r="true",style:l={}}=e,d=(0,i.useRef)(null),c=(0,i.useRef)(!1),[u,h]=(0,i.useState)(!1);return((0,i.useEffect)(()=>(h(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,i.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))d.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{d.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0)}}}},[u]),u)?(0,s.jsx)("ins",{ref:d,className:"adsbygoogle ".concat(o),style:{display:"block",...l},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":a,"data-full-width-responsive":r}):null};function o(e){return class extends i.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"6208304795",className:"h-[336px] top-0 sticky",style:{display:"inline-block",width:"336px",height:"280px"}})})]})})}constructor(e){super(e)}}}},8740:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return r}});var s=n(85893),i=n(1475),a=n(25190),o=n(16833),r=!0;t.default=(0,a.Z)((0,o.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"ES6 Classes & Constructors"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(i.Y3,{activeQuestionIndex:20,totalQuestions:28,index:20,question:"What OOP principle is demonstrated here?",options:["Encapsulation","Polymorphism","Inheritance","Composition"],code:"class FormField {\n  constructor(value = '') {\n    this.value = value;\n    this.errors = [];\n  }\n  \n  setValue(value) {\n    this.value = value;\n    this.validate();\n    return this;\n  }\n  \n  validate() {\n    this.errors = [];\n    // Base validation logic\n    return this.errors.length === 0;\n  }\n}\n\nclass EmailField extends FormField {\n  validate() {\n    super.validate();\n    if (this.value && !this.value.includes('@')) {\n      this.errors.push('Invalid email format');\n    }\n    return this.errors.length === 0;\n  }\n}",nextQuestionPath:"what-design-pattern-is-implemented-by-the-container-class",correctAnswer:2,explanation:"This code demonstrates polymorphism: 1) The child class overrides the validate method with its own implementation, 2) It extends the base functionality by calling super.validate(), 3) The same method name is used but with different behaviors in parent and child classes, 4) Code that uses FormField can work with EmailField without knowing the specific type, 5) This enables flexible and extensible code, 6) It's a key principle in object-oriented programming that allows for specialization while maintaining common interfaces.",id:735,quizId:34},20)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=72359)}),_N_E=e.O()}]);