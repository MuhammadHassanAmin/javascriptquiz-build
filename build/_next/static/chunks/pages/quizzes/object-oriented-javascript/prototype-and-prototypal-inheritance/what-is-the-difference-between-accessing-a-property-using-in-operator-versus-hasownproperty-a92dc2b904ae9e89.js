(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[37489],{91023:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/object-oriented-javascript/prototype-and-prototypal-inheritance/what-is-the-difference-between-accessing-a-property-using-in-operator-versus-hasownproperty",function(){return n(254)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var s=n(85893),o=n(67294),r=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",className:r}=e,i=(0,o.useRef)(null),c=(0,o.useRef)(!1),[a,d]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(d(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(a){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))i.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{i.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0)}}}},[a]),a)?(0,s.jsx)("ins",{ref:i,className:"adsbygoogle ".concat(r),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n}):null};function i(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(r,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(r,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},254:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return c}});var s=n(85893),o=n(1475),r=n(25190),i=n(16833),c=!0;t.default=(0,r.Z)((0,i.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Prototype & Prototypal Inheritance"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(o.Y3,{activeQuestionIndex:5,totalQuestions:22,index:5,question:"What is the difference between accessing a property using 'in' operator versus hasOwnProperty()?",options:["They are identical in behavior","'in' checks the prototype chain, hasOwnProperty() only checks the object itself","hasOwnProperty() checks the prototype chain, 'in' only checks the object itself","'in' is faster than hasOwnProperty()"],code:"const parent = { value: 42 };\nconst child = Object.create(parent);",nextQuestionPath:"which-pattern-does-this-code-demonstrate",correctAnswer:2,explanation:"The key difference is their scope of search: 1) 'in' operator checks both the object's own properties AND its prototype chain ('value' in child is true), 2) hasOwnProperty() strictly checks only the object's own properties (child.hasOwnProperty('value') is false), 3) This distinction is crucial when you need to distinguish between inherited vs. own properties, 4) Using hasOwnProperty() is important when iterating objects to avoid prototype properties, 5) 'in' is useful when you just need to know if a property is accessible, regardless of inheritance, 6) This difference highlights JavaScript's prototype-based inheritance mechanism.",id:698,quizId:33},5)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=91023)}),_N_E=e.O()}]);