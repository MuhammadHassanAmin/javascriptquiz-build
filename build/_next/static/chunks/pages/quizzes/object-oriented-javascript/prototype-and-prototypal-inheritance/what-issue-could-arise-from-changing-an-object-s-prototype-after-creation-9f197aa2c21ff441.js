(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[30908],{24133:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/object-oriented-javascript/prototype-and-prototypal-inheritance/what-issue-could-arise-from-changing-an-object-s-prototype-after-creation",function(){return n(61532)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var o=n(85893),r=n(67294),s=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",className:s}=e,a=(0,r.useRef)(null),i=(0,r.useRef)(!1),[c,l]=(0,r.useState)(!1);return((0,r.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,r.useEffect)(()=>{if(c){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))a.current&&!i.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),i.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{a.current&&!i.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),i.current=!0)}}}},[c]),c)?(0,o.jsx)("ins",{ref:a,className:"adsbygoogle ".concat(s),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n}):null};function a(e){return class extends r.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,o.jsx)("div",{children:(0,o.jsx)(s,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,o.jsx)("div",{children:(0,o.jsx)(e,{...this.props})}),(0,o.jsx)("div",{children:(0,o.jsx)(s,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},61532:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return i}});var o=n(85893),r=n(1475),s=n(25190),a=n(16833),i=!0;t.default=(0,s.Z)((0,a.Z)(()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Prototype & Prototypal Inheritance"}),(0,o.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,o.jsx)(r.Y3,{activeQuestionIndex:14,totalQuestions:22,index:14,question:"What issue could arise from changing an object's prototype after creation?",options:["It's not possible to change the prototype after creation","It will cause syntax errors","It can lead to inconsistent behavior","It can severely impact performance"],code:"function Mammal() {}\nfunction Bird() {}\n\nconst bat = new Mammal();\n\nObject.setPrototypeOf(bat, Bird.prototype);",nextQuestionPath:"what-advantage-does-this-pattern-provide-over-constructor-functions",correctAnswer:4,explanation:"Changing an object's prototype after creation with Object.setPrototypeOf() can severely impact performance because: 1) JavaScript engines optimize property access based on the initial prototype structure, 2) Changing the prototype invalidates these optimizations, 3) It requires the engine to reoptimize object property lookups, 4) Modern JavaScript engines specially optimize object creation patterns but not prototype changes, 5) All browsers explicitly warn against this in their documentation, 6) Better alternatives include creating objects with the desired prototype initially with Object.create(). This operation can be up to 100x slower than normal property access.",id:707,quizId:33},14)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=24133)}),_N_E=e.O()}]);