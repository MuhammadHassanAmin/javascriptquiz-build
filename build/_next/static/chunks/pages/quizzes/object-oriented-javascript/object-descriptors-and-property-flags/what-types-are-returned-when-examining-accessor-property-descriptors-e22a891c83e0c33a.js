(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4079],{94729:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/object-oriented-javascript/object-descriptors-and-property-flags/what-types-are-returned-when-examining-accessor-property-descriptors",function(){return n(84355)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return c}});var r=n(85893),s=n(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:o="auto",className:c,fullWidthResponsive:a="true"}=e,i=(0,s.useRef)(null),u=(0,s.useRef)(!1),[d,l]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))i.current&&!u.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),u.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{i.current&&!u.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),u.current=!0)}}}},[d]),d)?(0,r.jsx)("ins",{ref:i,className:"adsbygoogle ".concat(c),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":o,"data-full-width-responsive":a}):null};function c(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,r.jsx)("div",{children:(0,r.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,r.jsx)("div",{children:(0,r.jsx)(e,{...this.props})}),(0,r.jsx)("div",{children:(0,r.jsx)(o,{adSlot:"6208304795",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},84355:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return a}});var r=n(85893),s=n(1475),o=n(25190),c=n(16833),a=!0;t.default=(0,o.Z)((0,c.Z)(()=>(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Object Descriptors & Property Flags"}),(0,r.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,r.jsx)(s.Y3,{activeQuestionIndex:37,totalQuestions:40,index:37,question:"What types are returned when examining accessor property descriptors?",options:["undefined, undefined","'function', 'function'","'object', 'object'","'string', 'string'"],code:"const user = {};\n\nlet nameValue = '';\n\nObject.defineProperty(user, 'name', {\n  get() {\n    return nameValue;\n  },\n  set(value) {\n    console.log(`Setting name to ${value}`);\n    nameValue = value;\n  },\n  enumerable: true\n});\n\nuser.name = 'John';\nconst descriptor = Object.getOwnPropertyDescriptor(user, 'name');\nconsole.log(typeof descriptor.get, typeof descriptor.set);",nextQuestionPath:"what-s-the-key-difference-between-these-two-functions",correctAnswer:2,explanation:"The console will log 'function', 'function' because: 1) The property descriptor of an accessor property includes the getter and setter functions, 2) Object.getOwnPropertyDescriptor() returns the complete descriptor including these functions, 3) Both get and set are functions, so typeof returns 'function' for each, 4) The descriptor doesn't contain the current value (that's stored in the closure variable nameValue), 5) This demonstrates how accessor properties store their behavior rather than direct values, 6) This information is useful for metaprogramming and property manipulation, 7) It allows code to check whether a property is an accessor property by testing for the presence of get/set functions.",id:854,quizId:38},37)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=94729)}),_N_E=e.O()}]);