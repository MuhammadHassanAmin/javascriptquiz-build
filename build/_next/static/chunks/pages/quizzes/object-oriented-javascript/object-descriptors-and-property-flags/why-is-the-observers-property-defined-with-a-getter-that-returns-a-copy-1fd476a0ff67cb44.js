(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[19491],{56890:function(e,t,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/object-oriented-javascript/object-descriptors-and-property-flags/why-is-the-observers-property-defined-with-a-getter-that-returns-a-copy",function(){return r(64418)}])},16833:function(e,t,r){"use strict";r.d(t,{Z:function(){return a}});var n=r(85893),s=r(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:r="6753219060",className:o}=e,a=(0,s.useRef)(null),i=(0,s.useRef)(!1),[c,d]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(d(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(c){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))a.current&&!i.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),i.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{a.current&&!i.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),i.current=!0)}}}},[c]),c)?(0,n.jsx)("ins",{ref:a,className:"adsbygoogle ".concat(o),style:{display:"block"},"data-ad-client":t,"data-ad-slot":r}):null};function a(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,n.jsx)("div",{children:(0,n.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,n.jsx)("div",{children:(0,n.jsx)(e,{...this.props})}),(0,n.jsx)("div",{children:(0,n.jsx)(o,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},64418:function(e,t,r){"use strict";r.r(t),r.d(t,{__N_SSG:function(){return i}});var n=r(85893),s=r(1475),o=r(41354),a=r(16833),i=!0;t.default=(0,o.Z)((0,a.Z)(()=>(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Object Descriptors & Property Flags"}),(0,n.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,n.jsx)(s.Y3,{activeQuestionIndex:21,totalQuestions:40,index:21,question:"Why is the 'observers' property defined with a getter that returns a copy?",options:["To improve performance","To make observers enumerable","To prevent external code from modifying the internal observers array","It's a JavaScript requirement for arrays"],code:"function Observable() {\n  const observers = [];\n  \n  Object.defineProperty(this, 'observers', {\n    get() { return [...observers]; }\n  });\n  \n  this.addObserver = function(observer) {\n    observers.push(observer);\n  };\n  \n  this.notifyAll = function(data) {\n    observers.forEach(observer => observer(data));\n  };\n}",nextQuestionPath:"what-method-can-check-if-an-object-is-frozen",correctAnswer:3,explanation:"The 'observers' property is defined with a getter that returns a copy to prevent external code from modifying the internal observers array: 1) It returns a new array with [...observers] to create a defensive copy, 2) This prevents external code from directly adding, removing, or reordering observers, 3) It maintains encapsulation by controlling access to the internal state, 4) Changes to the array must go through the public API (addObserver), 5) This ensures the Observable maintains control over its observer list, 6) It's a common pattern for protecting internal collections while still providing read access, 7) Without this protection, external code could interfere with the observer notification mechanism.",id:838,quizId:38},21)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=56890)}),_N_E=e.O()}]);