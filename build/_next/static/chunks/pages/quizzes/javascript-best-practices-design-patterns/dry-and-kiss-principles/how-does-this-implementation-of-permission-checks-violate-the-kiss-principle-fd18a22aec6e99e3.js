(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[58305],{62027:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/dry-and-kiss-principles/how-does-this-implementation-of-permission-checks-violate-the-kiss-principle",function(){return s(54163)}])},16833:function(e,n,s){"use strict";s.d(n,{Z:function(){return i}});var t=s(85893),r=s(67294),o=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:s="6753219060",className:o}=e,i=(0,r.useRef)(null),c=(0,r.useRef)(!1),[a,l]=(0,r.useState)(!1);return((0,r.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,r.useEffect)(()=>{if(a){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))i.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{i.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0)}}}},[a]),a)?(0,t.jsx)("ins",{ref:i,className:"adsbygoogle ".concat(o),style:{display:"block"},"data-ad-client":n,"data-ad-slot":s}):null};function i(e){return class extends r.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,t.jsx)("div",{children:(0,t.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,t.jsx)("div",{children:(0,t.jsx)(e,{...this.props})}),(0,t.jsx)("div",{children:(0,t.jsx)(o,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},54163:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return c}});var t=s(85893),r=s(1475),o=s(41354),i=s(16833),c=!0;n.default=(0,o.Z)((0,i.Z)(()=>(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"DRY & KISS Principles"}),(0,t.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,t.jsx)(r.Y3,{activeQuestionIndex:18,totalQuestions:20,index:18,question:"How does this implementation of permission checks violate the KISS principle?",options:["The function name is not descriptive","The permission matrix is incomplete","The logic is overly complex with nested checks","The role hierarchy is too simple"],code:"function checkPermission(user, action, resource) {\n  if (!user || !user.roles) return false;\n\n  const roleHierarchy = {\n    admin: ['manager', 'editor', 'user'],\n    manager: ['editor', 'user'],\n    editor: ['user'],\n    user: []\n  };\n\n  const permissionMatrix = {\n    user: {\n      read: ['post', 'comment'],\n      write: ['comment']\n    },\n    editor: {\n      read: ['post', 'comment', 'draft'],\n      write: ['post', 'comment']\n    },\n    manager: {\n      read: ['post', 'comment', 'draft', 'user'],\n      write: ['post', 'comment', 'draft'],\n      delete: ['post', 'comment']\n    },\n    admin: {\n      read: ['*'],\n      write: ['*'],\n      delete: ['*']\n    }\n  };\n\n  return user.roles.some(role => {\n    const roles = [role, ...roleHierarchy[role]];\n    return roles.some(r => {\n      const permissions = permissionMatrix[r];\n      if (!permissions) return false;\n      \n      const allowedResources = permissions[action];\n      if (!allowedResources) return false;\n      \n      return allowedResources.includes('*') || \n             allowedResources.includes(resource);\n    });\n  });\n}",nextQuestionPath:"which-principle-is-primarily-violated-in-this-implementation-of-a-theme-system",correctAnswer:3,explanation:"This code violates the KISS principle by implementing overly complex permission checking logic with nested role hierarchies and permission matrices. A simpler approach would be:\n\nconst ROLE_PERMISSIONS = {\n  admin: () => true, // Admin can do everything\n  manager: (action, resource) => {\n    const allowed = {\n      read: ['post', 'comment', 'draft', 'user'],\n      write: ['post', 'comment', 'draft'],\n      delete: ['post', 'comment']\n    };\n    return allowed[action]?.includes(resource) ?? false;\n  },\n  editor: (action, resource) => {\n    const allowed = {\n      read: ['post', 'comment', 'draft'],\n      write: ['post', 'comment']\n    };\n    return allowed[action]?.includes(resource) ?? false;\n  },\n  user: (action, resource) => {\n    const allowed = {\n      read: ['post', 'comment'],\n      write: ['comment']\n    };\n    return allowed[action]?.includes(resource) ?? false;\n  }\n};\n\nfunction checkPermission(user, action, resource) {\n  return user?.roles?.some(role => \n    ROLE_PERMISSIONS[role]?.(action, resource)\n  ) ?? false;\n}",id:1439,quizId:63},18)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=62027)}),_N_E=e.O()}]);