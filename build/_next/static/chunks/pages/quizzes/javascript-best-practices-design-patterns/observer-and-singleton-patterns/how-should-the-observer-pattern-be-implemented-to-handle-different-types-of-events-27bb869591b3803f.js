(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7883],{77283:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/observer-and-singleton-patterns/how-should-the-observer-pattern-be-implemented-to-handle-different-types-of-events",function(){return t(79432)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return i}});var s=t(85893),r=t(67294),a=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",className:a}=e,i=(0,r.useRef)(null),o=(0,r.useRef)(!1),[d,l]=(0,r.useState)(!1);return((0,r.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,r.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))i.current&&!o.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),o.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{i.current&&!o.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),o.current=!0)}}}},[d]),d)?(0,s.jsx)("ins",{ref:i,className:"adsbygoogle ".concat(a),style:{display:"block"},"data-ad-client":n,"data-ad-slot":t}):null};function i(e){return class extends r.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"6208304795",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},79432:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return o}});var s=t(85893),r=t(1475),a=t(25190),i=t(16833),o=!0;n.default=(0,a.Z)((0,i.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Observer & Singleton Patterns"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(r.Y3,{activeQuestionIndex:10,totalQuestions:15,index:10,question:"How should the Observer Pattern be implemented to handle different types of events?",options:["Use separate observer classes for each event type","Create a new subject for each event type","Use a single handler for all events","Use a Map to store different event type handlers"],code:"class EventSubject {\n  #handlers = new Map();\n\n  on(eventType, handler) {\n    if (!this.#handlers.has(eventType)) {\n      this.#handlers.set(eventType, new Set());\n    }\n    this.#handlers.get(eventType).add(handler);\n    return () => this.off(eventType, handler);\n  }\n\n  off(eventType, handler) {\n    const handlers = this.#handlers.get(eventType);\n    if (handlers) {\n      handlers.delete(handler);\n      if (handlers.size === 0) {\n        this.#handlers.delete(eventType);\n      }\n    }\n  }\n\n  emit(eventType, data) {\n    this.#handlers.get(eventType)?.forEach(handler => handler(data));\n  }\n}",nextQuestionPath:"what-is-the-best-practice-for-implementing-error-handling-in-the-observer-pattern",correctAnswer:4,explanation:"This implementation effectively handles different event types by: 1) Using a Map to store handlers for different event types, 2) Organizing handlers by event type in Sets for uniqueness, 3) Providing type-specific subscription and emission, and 4) Properly cleaning up empty handler sets. This approach maintains good separation of concerns while keeping the implementation flexible.",id:1451,quizId:64},10)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=77283)}),_N_E=e.O()}]);