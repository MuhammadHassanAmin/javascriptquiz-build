(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[14240],{71157:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/observer-and-singleton-patterns/how-should-you-implement-an-observer-pattern-for-handling-asynchronous-events",function(){return t(6989)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return a}});var s=t(85893),o=t(67294),r=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",adFormat:r="auto",className:a,fullWidthResponsive:i="true"}=e,c=(0,o.useRef)(null),d=(0,o.useRef)(!1),[l,u]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(u(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(l){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))c.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{c.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[l]),l)?(0,s.jsx)("ins",{ref:c,className:"adsbygoogle ".concat(a),style:{display:"block"},"data-ad-client":n,"data-ad-slot":t,"data-ad-format":r,"data-full-width-responsive":i}):null};function a(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(r,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(r,{adSlot:"6208304795",className:"h-[300px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},6989:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return i}});var s=t(85893),o=t(1475),r=t(25190),a=t(16833),i=!0;n.default=(0,r.Z)((0,a.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Observer & Singleton Patterns"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(o.Y3,{activeQuestionIndex:6,totalQuestions:15,index:6,question:"How should you implement an Observer Pattern for handling asynchronous events?",options:["Async operations should be avoided in observers","The notify method shouldn't be async","Each observer should handle its own async operations independently","The implementation correctly handles async notifications"],code:"class AsyncSubject {\n  constructor() {\n    this.observers = new Set();\n  }\n\n  subscribe(observer) {\n    this.observers.add(observer);\n    return () => this.observers.delete(observer);\n  }\n\n  async notify(data) {\n    const notifications = Array.from(this.observers)\n      .map(observer => observer.update(data));\n    await Promise.all(notifications);\n  }\n}\n\nclass AsyncObserver {\n  async update(data) {\n    // Handle async update\n    await processData(data);\n  }\n}",nextQuestionPath:"what-is-the-best-way-to-implement-unsubscribe-functionality-in-the-observer-pattern",correctAnswer:4,explanation:"This implementation correctly handles asynchronous events in the Observer Pattern by: 1) Using async/await for the notify method, 2) Handling Promise.all to wait for all observer updates, 3) Allowing observers to perform async operations, and 4) Using a Set to manage unique observers. This approach ensures proper handling of asynchronous updates while maintaining the pattern's structure.",id:1447,quizId:64},6)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=71157)}),_N_E=e.O()}]);