(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[16578],{73325:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/factory-and-constructor-functions/what-s-the-benefit-of-this-lazy-initialization-approach-in-a-factory",function(){return n(1009)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var s=n(85893),i=n(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:o="auto",className:a,fullWidthResponsive:r="true",style:c={}}=e,u=(0,i.useRef)(null),l=(0,i.useRef)(!1),[d,p]=(0,i.useState)(!1);return((0,i.useEffect)(()=>(p(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,i.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))u.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{u.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[d]),d)?(0,s.jsx)("ins",{ref:u,className:"adsbygoogle ".concat(a),style:{display:"block",...c},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":o,"data-full-width-responsive":r}):null};function a(e){return class extends i.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(o,{adSlot:"6208304795",className:"h-[336px] top-0 sticky",style:{display:"inline-block",width:"336px",height:"280px"}})})]})})}constructor(e){super(e)}}}},1009:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return r}});var s=n(85893),i=n(1475),o=n(25190),a=n(16833),r=!0;t.default=(0,o.Z)((0,a.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Factory & Constructor Functions"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(i.Y3,{activeQuestionIndex:17,totalQuestions:20,index:17,question:"What's the benefit of this lazy initialization approach in a factory?",options:["It makes processing faster","It uses less memory overall","It defers expensive initialization until needed","It prevents memory leaks"],code:"const createDataProcessor = (() => {\n  let heavyResource;\n  \n  const initializeResource = () => {\n    // Expensive initialization\n    return { /* complex data structure */ };\n  };\n  \n  return () => {\n    if (!heavyResource) {\n      heavyResource = initializeResource();\n    }\n    return {\n      process(data) {\n        return heavyResource.process(data);\n      }\n    };\n  };\n})();",nextQuestionPath:"what-potential-issue-exists-in-this-composite-factory-pattern",correctAnswer:3,explanation:"This lazy initialization pattern in a factory function defers expensive resource initialization until it's actually needed. The heavyResource is only created on first use, not when the factory is defined. This improves application startup time and saves resources if the processor is never used. It combines the benefits of factory functions (creating new processor instances) with efficient resource sharing (reusing the expensive resource across instances).",id:1473,quizId:65},17)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=73325)}),_N_E=e.O()}]);