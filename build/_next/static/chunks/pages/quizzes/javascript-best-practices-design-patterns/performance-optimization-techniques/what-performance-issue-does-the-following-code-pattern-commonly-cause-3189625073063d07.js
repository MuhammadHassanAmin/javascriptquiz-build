(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[39300],{20547:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/performance-optimization-techniques/what-performance-issue-does-the-following-code-pattern-commonly-cause",function(){return n(56460)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return c}});var o=n(85893),s=n(67294),i=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",className:i}=e,c=(0,s.useRef)(null),a=(0,s.useRef)(!1),[r,l]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(r){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))c.current&&!a.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),a.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{c.current&&!a.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),a.current=!0)}}}},[r]),r)?(0,o.jsx)("ins",{ref:c,className:"adsbygoogle ".concat(i),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n}):null};function c(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,o.jsx)("div",{children:(0,o.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,o.jsx)("div",{children:(0,o.jsx)(e,{...this.props})}),(0,o.jsx)("div",{children:(0,o.jsx)(i,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},56460:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return a}});var o=n(85893),s=n(1475),i=n(25190),c=n(16833),a=!0;t.default=(0,i.Z)((0,c.Z)(()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Performance Optimization Techniques"}),(0,o.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,o.jsx)(s.Y3,{activeQuestionIndex:1,totalQuestions:40,index:1,question:"What performance issue does the following code pattern commonly cause?",options:["Memory leaks","Unnecessary array length lookup on each iteration","Stack overflow","Excessive garbage collection"],code:"function processItems(items) {\n  for (let i = 0; i < items.length; i++) {\n    // Process each item\n    console.log(items[i]);\n  }\n}",nextQuestionPath:"which-operation-has-the-best-time-complexity-when-working-with-javascript-objects",correctAnswer:2,explanation:"In this code pattern, items.length is recalculated on every iteration of the loop, which can cause performance issues with large arrays. The JavaScript engine has to look up the length property of the items array in each iteration. A more optimized approach would be to cache the length before the loop: const len = items.length; for (let i = 0; i < len; i++) { ... }. Modern JavaScript engines may optimize this in simple cases, but explicitly caching the length is still considered a best practice, especially for complex loops or when working with DOM collections which may not benefit from the same optimizations.",id:1497,quizId:67},1)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=20547)}),_N_E=e.O()}]);