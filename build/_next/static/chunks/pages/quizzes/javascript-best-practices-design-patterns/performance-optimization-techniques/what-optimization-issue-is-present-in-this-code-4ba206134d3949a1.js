(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[27072],{33522:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/performance-optimization-techniques/what-optimization-issue-is-present-in-this-code",function(){return n(11469)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return r}});var o=n(85893),s=n(67294),i=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:i="auto",className:r,fullWidthResponsive:a="true"}=e,c=(0,s.useRef)(null),d=(0,s.useRef)(!1),[u,l]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))c.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{c.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[u]),u)?(0,o.jsx)("ins",{ref:c,className:"adsbygoogle ".concat(r),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":i,"data-full-width-responsive":a}):null};function r(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,o.jsx)("div",{children:(0,o.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,o.jsx)("div",{children:(0,o.jsx)(e,{...this.props})}),(0,o.jsx)("div",{children:(0,o.jsx)(i,{adSlot:"6208304795",className:"h-[300px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},11469:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return a}});var o=n(85893),s=n(1475),i=n(25190),r=n(16833),a=!0;t.default=(0,i.Z)((0,r.Z)(()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Performance Optimization Techniques"}),(0,o.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,o.jsx)(s.Y3,{activeQuestionIndex:22,totalQuestions:40,index:22,question:"What optimization issue is present in this code?",options:["Promise creation overhead for synchronous operations","Memory leak in the setTimeout callback","Inefficient array searching algorithm","Race condition between Promise resolution and setTimeout"],code:"function searchItems(items, targetId) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const result = items.find(item => item.id === targetId);\n      resolve(result);\n    }, 0);\n  });\n}",nextQuestionPath:"what-performance-advantage-does-using-object-keys-length-have-over-object-entries-when-only-checking-the-number-of-properties",correctAnswer:1,explanation:"The main optimization issue in this code is the unnecessary Promise creation overhead for what is essentially a synchronous operation. The function wraps a simple array find() operation in both a Promise and a setTimeout, adding significant overhead without any real benefit. This pattern forces the JavaScript engine to create Promise objects, schedule a task on the event loop with setTimeout, and handle asynchronous resolutionâ€”all for an operation that could be performed synchronously and return immediately. For truly synchronous operations, it's more efficient to just perform them directly. If asynchronous behavior is truly needed (e.g., to avoid blocking the main thread with a very large array), consider using more appropriate techniques like actual Web Workers or breaking the work into smaller chunks with proper scheduling.",id:1518,quizId:67},22)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=33522)}),_N_E=e.O()}]);