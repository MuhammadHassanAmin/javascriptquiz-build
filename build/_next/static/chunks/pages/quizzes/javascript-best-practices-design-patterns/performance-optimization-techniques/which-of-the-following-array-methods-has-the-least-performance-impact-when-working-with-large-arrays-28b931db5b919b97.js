(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[72328],{82338:function(e,t,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/performance-optimization-techniques/which-of-the-following-array-methods-has-the-least-performance-impact-when-working-with-large-arrays",function(){return r(33871)}])},16833:function(e,t,r){"use strict";r.d(t,{Z:function(){return s}});var a=r(85893),n=r(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:r="6753219060",className:o}=e,s=(0,n.useRef)(null),i=(0,n.useRef)(!1),[c,d]=(0,n.useState)(!1);return((0,n.useEffect)(()=>(d(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,n.useEffect)(()=>{if(c){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))s.current&&!i.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),i.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{s.current&&!i.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),i.current=!0)}}}},[c]),c)?(0,a.jsx)("ins",{ref:s,className:"adsbygoogle ".concat(o),style:{display:"block"},"data-ad-client":t,"data-ad-slot":r}):null};function s(e){return class extends n.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,a.jsx)("div",{children:(0,a.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,a.jsx)("div",{children:(0,a.jsx)(e,{...this.props})}),(0,a.jsx)("div",{children:(0,a.jsx)(o,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},33871:function(e,t,r){"use strict";r.r(t),r.d(t,{__N_SSG:function(){return i}});var a=r(85893),n=r(1475),o=r(41354),s=r(16833),i=!0;t.default=(0,o.Z)((0,s.Z)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Performance Optimization Techniques"}),(0,a.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,a.jsx)(n.Y3,{activeQuestionIndex:0,totalQuestions:40,index:0,question:"Which of the following array methods has the least performance impact when working with large arrays?",options:["Array.prototype.forEach()","Array.prototype.filter()","Array.prototype.map()","Array.prototype.reduce()"],code:void 0,nextQuestionPath:"what-performance-issue-does-the-following-code-pattern-commonly-cause",correctAnswer:1,explanation:"Array.prototype.forEach() generally has the least performance impact when working with large arrays compared to the other methods listed. This is because forEach() simply iterates through the array without creating a new array in memory, unlike map() and filter() which create and return new arrays. While reduce() doesn't necessarily create a new array, it has additional overhead for maintaining the accumulator. However, it's important to note that the actual performance differences depend on the specific operations performed in the callback functions and the JavaScript engine's optimizations.",id:1496,quizId:67},0)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=82338)}),_N_E=e.O()}]);