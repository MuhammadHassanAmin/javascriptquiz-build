(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[41499],{95279:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/performance-optimization-techniques/which-of-these-operations-is-most-likely-to-cause-a-bottleneck-in-a-javascript-application",function(){return n(38588)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var s=n(85893),o=n(67294),a=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",className:a}=e,i=(0,o.useRef)(null),r=(0,o.useRef)(!1),[c,l]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(c){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))i.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{i.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0)}}}},[c]),c)?(0,s.jsx)("ins",{ref:i,className:"adsbygoogle ".concat(a),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n}):null};function i(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},38588:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return r}});var s=n(85893),o=n(1475),a=n(41354),i=n(16833),r=!0;t.default=(0,a.Z)((0,i.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Performance Optimization Techniques"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(o.Y3,{activeQuestionIndex:27,totalQuestions:40,index:27,question:"Which of these operations is most likely to cause a bottleneck in a JavaScript application?",options:["Object spread operations ({...obj})","Array destructuring assignments","Forced layout recalculations (accessing offsetWidth after changing styles)","Arrow function creation"],code:void 0,nextQuestionPath:"what-optimization-technique-would-be-most-appropriate-for-a-function-that-performs-expensive-calculations-based-on-inputs-that-often-repeat",correctAnswer:3,explanation:"Forced layout recalculations (accessing offsetWidth after changing styles) are most likely to cause a bottleneck in a JavaScript application. This operation causes what's known as 'layout thrashing' or 'forced synchronous layout,' which can severely impact performance. When JavaScript modifies DOM or styles and then immediately reads layout properties like offsetWidth, offsetHeight, clientWidth, getBoundingClientRect(), or computed styles, it forces the browser to perform an immediate layout calculation to return accurate values. This prevents the browser from batching layout calculations and can lead to significant performance issues, especially in loops or frequently running code. To avoid this, separate your DOM reads and writes: first read all needed measurements, then perform all DOM modifications. Tools like FastDOM can help enforce this separation.",id:1523,quizId:67},27)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=95279)}),_N_E=e.O()}]);