(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[65904],{89027:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/performance-optimization-techniques/which-of-the-following-string-operations-tends-to-be-the-least-efficient-for-large-scale-string-manipulations",function(){return n(45100)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return s}});var i=n(85893),a=n(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:o="auto",className:s,fullWidthResponsive:r="true",style:c={}}=e,l=(0,a.useRef)(null),d=(0,a.useRef)(!1),[p,u]=(0,a.useState)(!1);return((0,a.useEffect)(()=>(u(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,a.useEffect)(()=>{if(p){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[p]),p)?(0,i.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(s),style:{display:"block",...c},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":o,"data-full-width-responsive":r}):null};function s(e){return class extends a.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,i.jsx)("div",{children:(0,i.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,i.jsx)("div",{children:(0,i.jsx)(e,{...this.props})}),(0,i.jsxs)("div",{children:[(0,i.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,i.jsx)(o,{adSlot:"6208304795",className:"h-[336px]"})}),(0,i.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,i.jsx)(o,{adSlot:"6208304795",className:"h-[336px]"})})]})]})})}constructor(e){super(e)}}}},45100:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return r}});var i=n(85893),a=n(1475),o=n(25190),s=n(16833),r=!0;t.default=(0,o.Z)((0,s.Z)(()=>(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Performance Optimization Techniques"}),(0,i.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,i.jsx)(a.Y3,{activeQuestionIndex:20,totalQuestions:40,index:20,question:"Which of the following string operations tends to be the least efficient for large-scale string manipulations?",options:["Using template literals for concatenation","Using Array.prototype.join() for concatenation","Using string addition operator (+) in a loop","Using String.prototype.replace() for simple replacements"],code:void 0,nextQuestionPath:"what-performance-benefit-does-using-const-and-let-provide-compared-to-var",correctAnswer:3,explanation:"Using the string addition operator (+) in a loop tends to be the least efficient operation for large-scale string manipulations. Strings in JavaScript are immutable, meaning each string concatenation with the + operator creates a new string in memory. When done repeatedly in a loop, this leads to a quadratic time complexity O(n\xb2) behavior as each iteration creates a new, progressively longer string. For large-scale string concatenation, more efficient alternatives include: 1) Building an array of strings and joining them with Array.prototype.join() at the end, 2) Using a specialized string builder-like object, or 3) Using template literals for simpler concatenations. Modern JavaScript engines have optimized template literals and simple concatenation, but the loop pattern still remains problematic for large strings.",id:1516,quizId:67},20)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=89027)}),_N_E=e.O()}]);