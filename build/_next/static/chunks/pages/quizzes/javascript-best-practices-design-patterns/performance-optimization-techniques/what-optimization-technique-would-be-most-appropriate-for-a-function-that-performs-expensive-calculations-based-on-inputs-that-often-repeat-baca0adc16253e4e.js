(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[76823],{34773:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/performance-optimization-techniques/what-optimization-technique-would-be-most-appropriate-for-a-function-that-performs-expensive-calculations-based-on-inputs-that-often-repeat",function(){return n(7976)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var a=n(85893),i=n(67294),s=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:s="auto",className:o,fullWidthResponsive:r="true",style:c={}}=e,l=(0,i.useRef)(null),u=(0,i.useRef)(!1),[p,d]=(0,i.useState)(!1);return((0,i.useEffect)(()=>(d(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,i.useEffect)(()=>{if(p){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!u.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),u.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!u.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),u.current=!0)}}}},[p]),p)?(0,a.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(o),style:{display:"block",...c},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":s,"data-full-width-responsive":r}):null};function o(e){return class extends i.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,a.jsx)("div",{children:(0,a.jsx)(s,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,a.jsx)("div",{children:(0,a.jsx)(e,{...this.props})}),(0,a.jsx)("div",{children:(0,a.jsx)(s,{adSlot:"6208304795",className:"h-[336px] top-0 sticky",style:{display:"inline-block",height:"280px"}})})]})})}constructor(e){super(e)}}}},7976:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return r}});var a=n(85893),i=n(1475),s=n(25190),o=n(16833),r=!0;t.default=(0,s.Z)((0,o.Z)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Performance Optimization Techniques"}),(0,a.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,a.jsx)(i.Y3,{activeQuestionIndex:28,totalQuestions:40,index:28,question:"What optimization technique would be most appropriate for a function that performs expensive calculations based on inputs that often repeat?",options:["Debouncing","Memoization","Throttling","Web Workers"],code:void 0,nextQuestionPath:"when-working-with-large-arrays-in-performance-critical-code-which-approach-is-generally-more-efficient",correctAnswer:2,explanation:"Memoization would be the most appropriate optimization technique for a function that performs expensive calculations based on inputs that often repeat. Memoization is a technique that stores the results of function calls and returns the cached result when the same inputs occur again. This is particularly effective for pure functions (functions that always return the same output for a given input), especially those with expensive calculations. By caching results, repeated calls with the same parameters can skip the calculation entirely. Implementation typically involves maintaining a cache object or Map with function parameters as keys and return values as values. Memoization is ideal for algorithms like recursive Fibonacci calculations, complex mathematical operations, or expensive data transformations where the same inputs frequently recur.",id:1524,quizId:67},28)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=34773)}),_N_E=e.O()}]);