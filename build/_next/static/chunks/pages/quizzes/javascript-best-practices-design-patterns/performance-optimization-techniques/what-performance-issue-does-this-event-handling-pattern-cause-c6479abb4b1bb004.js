(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[23363],{43308:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/performance-optimization-techniques/what-performance-issue-does-this-event-handling-pattern-cause",function(){return n(10371)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var i=n(85893),s=n(67294),a=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:a="auto",className:o,fullWidthResponsive:c="true",style:r={}}=e,l=(0,s.useRef)(null),d=(0,s.useRef)(!1),[u,h]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(h(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[u]),u)?(0,i.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(o),style:{display:"block",...r},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":a,"data-full-width-responsive":c}):null};function o(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,i.jsx)("div",{children:(0,i.jsx)(a,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,i.jsx)("div",{children:(0,i.jsx)(e,{...this.props})}),(0,i.jsx)("div",{children:(0,i.jsx)(a,{adSlot:"6208304795",className:"h-[336px] top-0 sticky",style:{display:"inline-block",width:"336px",height:"280px"}})})]})})}constructor(e){super(e)}}}},10371:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return c}});var i=n(85893),s=n(1475),a=n(25190),o=n(16833),c=!0;t.default=(0,a.Z)((0,o.Z)(()=>(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Performance Optimization Techniques"}),(0,i.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,i.jsx)(s.Y3,{activeQuestionIndex:16,totalQuestions:40,index:16,question:"What performance issue does this event handling pattern cause?",options:["Memory leaks from not removing event listeners","Excessive CPU usage from anonymous functions","Inefficient event delegation","Blocking the main thread"],code:"document.querySelectorAll('.button').forEach(button => {\n  button.addEventListener('click', function() {\n    console.log('Button clicked:', this.textContent);\n  });\n});",nextQuestionPath:"which-of-the-following-is-not-a-valid-technique-for-avoiding-layout-thrashing",correctAnswer:3,explanation:"This code pattern causes inefficient event handling by attaching individual event listeners to each button element instead of using event delegation. With many elements, this approach can lead to significant memory overhead and initialization time as each element gets its own function and listener. Event delegation is a more efficient pattern where a single event listener is attached to a parent element, then handles events from all child elements using event.target. Example: document.querySelector('.container').addEventListener('click', function(event) { if (event.target.matches('.button')) { console.log('Button clicked:', event.target.textContent); } }); This approach uses less memory, initializes faster, and automatically handles dynamically added elements without requiring additional listeners.",id:1512,quizId:67},16)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=43308)}),_N_E=e.O()}]);