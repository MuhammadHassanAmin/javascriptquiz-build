(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[70502],{71821:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/performance-optimization-techniques/what-performance-issue-might-arise-from-the-following-code-pattern",function(){return n(83546)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return s}});var o=n(85893),a=n(67294),i=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",className:i}=e,s=(0,a.useRef)(null),r=(0,a.useRef)(!1),[c,l]=(0,a.useState)(!1);return((0,a.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,a.useEffect)(()=>{if(c){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))s.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{s.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0)}}}},[c]),c)?(0,o.jsx)("ins",{ref:s,className:"adsbygoogle ".concat(i),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n}):null};function s(e){return class extends a.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,o.jsx)("div",{children:(0,o.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,o.jsx)("div",{children:(0,o.jsx)(e,{...this.props})}),(0,o.jsx)("div",{children:(0,o.jsx)(i,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},83546:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return r}});var o=n(85893),a=n(1475),i=n(41354),s=n(16833),r=!0;t.default=(0,i.Z)((0,s.Z)(()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Performance Optimization Techniques"}),(0,o.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,o.jsx)(a.Y3,{activeQuestionIndex:5,totalQuestions:40,index:5,question:"What performance issue might arise from the following code pattern?",options:["Memory leaks from not removing event listeners","Multiple forced reflows and repaints","Excessive function calls","Inefficient string concatenation"],code:"function createElements(count) {\n  const container = document.getElementById('container');\n  for (let i = 0; i < count; i++) {\n    const element = document.createElement('div');\n    element.textContent = `Item ${i}`;\n    container.appendChild(element);\n  }\n}",nextQuestionPath:"which-method-would-be-most-efficient-for-finding-a-specific-item-in-a-large-sorted-array",correctAnswer:2,explanation:"This code pattern causes multiple forced reflows and repaints, which significantly impacts performance. Every time appendChild() is called, the browser may need to recalculate the layout (reflow) and repaint the screen. When this happens repeatedly in a loop, it causes a significant performance bottleneck. A more optimized approach would use DocumentFragment or batch DOM updates: create all elements first, append them to a document fragment, and then append the fragment to the container in a single operation. Example: const fragment = document.createDocumentFragment(); /* create and append elements to fragment */ container.appendChild(fragment);. This reduces the layout thrashing by limiting DOM updates to a single operation.",id:1501,quizId:67},5)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=71821)}),_N_E=e.O()}]);