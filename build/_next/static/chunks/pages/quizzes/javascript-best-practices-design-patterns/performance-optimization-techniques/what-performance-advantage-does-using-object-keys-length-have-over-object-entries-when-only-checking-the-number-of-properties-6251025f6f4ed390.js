(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[48961],{49703:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/performance-optimization-techniques/what-performance-advantage-does-using-object-keys-length-have-over-object-entries-when-only-checking-the-number-of-properties",function(){return n(75582)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var r=n(85893),s=n(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:o="auto",className:a,fullWidthResponsive:i="true",style:c={}}=e,l=(0,s.useRef)(null),u=(0,s.useRef)(!1),[d,p]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(p(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!u.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),u.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!u.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),u.current=!0)}}}},[d]),d)?(0,r.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(a),style:{display:"block",...c},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":o,"data-full-width-responsive":i}):null};function a(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,r.jsx)("div",{children:(0,r.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,r.jsx)("div",{children:(0,r.jsx)(e,{...this.props})}),(0,r.jsx)("div",{children:(0,r.jsx)(o,{adSlot:"6208304795",className:"h-[336px] top-0 sticky",style:{display:"inline-block",height:"280px"}})})]})})}constructor(e){super(e)}}}},75582:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return i}});var r=n(85893),s=n(1475),o=n(25190),a=n(16833),i=!0;t.default=(0,o.Z)((0,a.Z)(()=>(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Performance Optimization Techniques"}),(0,r.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,r.jsx)(s.Y3,{activeQuestionIndex:23,totalQuestions:40,index:23,question:"What performance advantage does using Object.keys().length have over Object.entries() when only checking the number of properties?",options:["It always returns the correct count including non-enumerable properties","It doesn't need to create arrays of key-value pairs in memory","It runs in a separate thread","It caches results automatically"],code:void 0,nextQuestionPath:"which-approach-is-most-efficient-for-removing-duplicate-values-from-an-array-while-preserving-order",correctAnswer:2,explanation:"Using Object.keys().length has a performance advantage over Object.entries() when only checking the number of properties because it doesn't need to create arrays of key-value pairs in memory. While Object.keys() still creates an array of all the keys, Object.entries() creates a more complex array structure containing arrays of [key, value] pairs for each property. This requires more memory allocation and processing. For simply counting properties, even better alternatives exist: 1) Object.keys(obj).length, 2) Object.getOwnPropertyNames(obj).length (which also includes non-enumerable properties), or 3) Using a manual counter with a for...in loop (though this includes properties from the prototype chain unless checked). The performance difference becomes more significant with objects that have many properties or complex values.",id:1519,quizId:67},23)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=49703)}),_N_E=e.O()}]);