(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[66491],{20016:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/performance-optimization-techniques/what-performance-pattern-does-this-code-implement",function(){return n(73851)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return c}});var i=n(85893),a=n(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:o="auto",className:c,fullWidthResponsive:s="true",style:r={}}=e,u=(0,a.useRef)(null),l=(0,a.useRef)(!1),[d,p]=(0,a.useState)(!1);return((0,a.useEffect)(()=>(p(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,a.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))u.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{u.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[d]),d)?(0,i.jsx)("ins",{ref:u,className:"adsbygoogle ".concat(c),style:{display:"block",...r},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":o,"data-full-width-responsive":s}):null};function c(e){return class extends a.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,i.jsx)("div",{children:(0,i.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,i.jsx)("div",{children:(0,i.jsx)(e,{...this.props})}),(0,i.jsx)("div",{children:(0,i.jsx)(o,{adSlot:"6208304795",className:"h-[100px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},73851:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return s}});var i=n(85893),a=n(1475),o=n(25190),c=n(16833),s=!0;t.default=(0,o.Z)((0,c.Z)(()=>(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Performance Optimization Techniques"}),(0,i.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,i.jsx)(a.Y3,{activeQuestionIndex:7,totalQuestions:40,index:7,question:"What performance pattern does this code implement?",options:["Tail call optimization","Memoization","Lazy evaluation","Function currying"],code:"const memoizedFibonacci = (function() {\n  const cache = {};\n\n  return function fibonacci(n) {\n    if (n in cache) {\n      return cache[n];\n    }\n    if (n <= 1) {\n      return n;\n    }\n    const result = fibonacci(n - 1) + fibonacci(n - 2);\n    cache[n] = result;\n    return result;\n  };\n})();",nextQuestionPath:"what-is-the-primary-performance-advantage-of-using-web-workers-in-javascript",correctAnswer:2,explanation:"This code implements memoization, a performance optimization technique that caches the results of expensive function calls to avoid redundant computations. In this specific example, the Fibonacci calculation for each value of n is stored in the cache object after it's computed for the first time. When the function is called again with the same input, the result is retrieved from the cache instead of being recalculated. For recursive functions like Fibonacci, memoization dramatically improves performance from O(2^n) to O(n) by eliminating the redundant calculations in the recursive tree. This is a valuable technique for any pure function (functions that always return the same output for the same input).",id:1503,quizId:67},7)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=20016)}),_N_E=e.O()}]);