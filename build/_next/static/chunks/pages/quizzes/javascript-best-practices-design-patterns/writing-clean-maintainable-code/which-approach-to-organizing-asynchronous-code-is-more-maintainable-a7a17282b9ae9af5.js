(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[70875],{96211:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/writing-clean-maintainable-code/which-approach-to-organizing-asynchronous-code-is-more-maintainable",function(){return t(7339)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return i}});var s=t(85893),r=t(67294),a=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",adFormat:a="auto",className:i,fullWidthResponsive:o="true",style:c={}}=e,d=(0,r.useRef)(null),l=(0,r.useRef)(!1),[u,p]=(0,r.useState)(!1);return((0,r.useEffect)(()=>(p(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,r.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))d.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{d.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[u]),u)?(0,s.jsx)("ins",{ref:d,className:"adsbygoogle ".concat(i),style:{display:"block",...c},"data-ad-client":n,"data-ad-slot":t,"data-ad-format":a,"data-full-width-responsive":o}):null};function i(e){return class extends r.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"6208304795",className:"h-[100px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},7339:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return o}});var s=t(85893),r=t(1475),a=t(25190),i=t(16833),o=!0;n.default=(0,a.Z)((0,i.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Writing Clean & Maintainable Code"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(r.Y3,{activeQuestionIndex:10,totalQuestions:20,index:10,question:"Which approach to organizing asynchronous code is more maintainable?",options:["Option A because it uses promises directly","Option B because it uses async/await","Both are equally maintainable","Neither is maintainable"],code:"// Option A:\ngetUser(id)\n  .then(user => {\n    return getOrders(user.id);\n  })\n  .then(orders => {\n    return processOrders(orders);\n  })\n  .catch(error => {\n    handleError(error);\n  });\n\n// Option B:\nasync function processUserOrders(id) {\n  try {\n    const user = await getUser(id);\n    const orders = await getOrders(user.id);\n    return await processOrders(orders);\n  } catch (error) {\n    handleError(error);\n  }\n}",nextQuestionPath:"what-is-the-significance-of-implementing-the-observer-pattern-in-javascript-applications",correctAnswer:2,explanation:"Option B using async/await is generally more maintainable because it: 1) Reads more like synchronous code, making it easier to understand the flow, 2) Makes error handling more straightforward with try/catch blocks, 3) Reduces callback nesting and chain complexity, and 4) Makes it easier to debug as the stack trace is more meaningful.",id:1391,quizId:61},10)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=96211)}),_N_E=e.O()}]);