(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[62398],{3568:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/solid-principles/what-solid-principle-is-violated-when-an-interface-forces-its-clients-to-implement-methods-they-don-t-need",function(){return n(72442)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return r}});var i=n(85893),s=n(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:o="auto",className:r,fullWidthResponsive:a="true"}=e,l=(0,s.useRef)(null),c=(0,s.useRef)(!1),[d,u]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(u(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0)}}}},[d]),d)?(0,i.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(r),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":o,"data-full-width-responsive":a}):null};function r(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,i.jsx)("div",{children:(0,i.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,i.jsx)("div",{children:(0,i.jsx)(e,{...this.props})}),(0,i.jsx)("div",{children:(0,i.jsx)(o,{adSlot:"6208304795",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},72442:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return a}});var i=n(85893),s=n(1475),o=n(25190),r=n(16833),a=!0;t.default=(0,o.Z)((0,r.Z)(()=>(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"SOLID Principles in JavaScript"}),(0,i.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,i.jsx)(s.Y3,{activeQuestionIndex:16,totalQuestions:20,index:16,question:"What SOLID principle is violated when an interface forces its clients to implement methods they don't need?",options:["Single Responsibility Principle","Open/Closed Principle","Interface Segregation Principle","Dependency Inversion Principle"],code:"interface SmartDevice {\n  turnOn(): void;\n  turnOff(): void;\n  connect(): void;\n  disconnect(): void;\n  play(): void;\n  pause(): void;\n  adjustVolume(level: number): void;\n  setBrightness(level: number): void;\n}\n\nclass SmartLight implements SmartDevice {\n  // Must implement all methods, even though a light\n  // doesn't need play(), pause(), or adjustVolume()\n}",nextQuestionPath:"which-solid-principle-suggests-that-abstractions-should-not-depend-on-details",correctAnswer:3,explanation:"This code violates the Interface Segregation Principle (ISP). The SmartDevice interface forces implementing classes to provide methods that may not be relevant to them. A better design would be to split this into smaller, more focused interfaces like PowerControl, NetworkConnection, MediaControl, and DisplayControl, allowing devices to implement only the interfaces that make sense for their functionality.",id:1417,quizId:62},16)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=3568)}),_N_E=e.O()}]);