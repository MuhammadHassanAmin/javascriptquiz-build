(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[22778],{74275:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/solid-principles/which-solid-principle-suggests-that-we-should-depend-on-abstractions-rather-than-concretions",function(){return t(1169)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return r}});var s=t(85893),o=t(67294),i=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",adFormat:i="auto",className:r,fullWidthResponsive:a="true",style:c={}}=e,d=(0,o.useRef)(null),l=(0,o.useRef)(!1),[p,u]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(u(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(p){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))d.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{d.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[p]),p)?(0,s.jsx)("ins",{ref:d,className:"adsbygoogle ".concat(r),style:{display:"block",...c},"data-ad-client":n,"data-ad-slot":t,"data-ad-format":i,"data-full-width-responsive":a}):null};function r(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsxs)("div",{children:[(0,s.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,s.jsx)(i,{adSlot:"6208304795",className:"h-[336px]"})}),(0,s.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,s.jsx)(i,{adSlot:"6208304795",className:"h-[336px]"})})]})]})})}constructor(e){super(e)}}}},1169:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return a}});var s=t(85893),o=t(1475),i=t(25190),r=t(16833),a=!0;n.default=(0,i.Z)((0,r.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"SOLID Principles in JavaScript"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(o.Y3,{activeQuestionIndex:11,totalQuestions:20,index:11,question:"Which SOLID principle suggests that we should depend on abstractions rather than concretions?",options:["Single Responsibility Principle","Open/Closed Principle","Dependency Inversion Principle","Interface Segregation Principle"],code:"// Before:\nclass PaymentProcessor {\n  constructor() {\n    this.stripe = new StripePayment();\n  }\n\n  processPayment(amount) {\n    return this.stripe.charge(amount);\n  }\n}\n\n// After:\nclass PaymentProcessor {\n  constructor(paymentProvider) {\n    this.paymentProvider = paymentProvider;\n  }\n\n  processPayment(amount) {\n    return this.paymentProvider.processPayment(amount);\n  }\n}",nextQuestionPath:"what-solid-principle-is-being-violated-in-this-input-validation-implementation",correctAnswer:3,explanation:"This example demonstrates the Dependency Inversion Principle (DIP). Instead of directly depending on a concrete StripePayment class, the PaymentProcessor now depends on an abstraction (paymentProvider interface). This allows for different payment providers to be injected, making the code more flexible and easier to test. The high-level module (PaymentProcessor) and low-level module (payment provider) both depend on the abstraction.",id:1412,quizId:62},11)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=74275)}),_N_E=e.O()}]);