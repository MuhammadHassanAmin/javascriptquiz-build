(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[98070],{27321:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/solid-principles/which-solid-principle-suggests-that-abstractions-should-not-depend-on-details",function(){return t(13941)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return r}});var s=t(85893),i=t(67294),o=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",adFormat:o="auto",className:r,fullWidthResponsive:c="true",style:a={}}=e,d=(0,i.useRef)(null),l=(0,i.useRef)(!1),[p,u]=(0,i.useState)(!1);return((0,i.useEffect)(()=>(u(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,i.useEffect)(()=>{if(p){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))d.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{d.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[p]),p)?(0,s.jsx)("ins",{ref:d,className:"adsbygoogle ".concat(r),style:{display:"block",...a},"data-ad-client":n,"data-ad-slot":t,"data-ad-format":o,"data-full-width-responsive":c}):null};function r(e){return class extends i.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(o,{adSlot:"6208304795",className:"h-[100px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},13941:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return c}});var s=t(85893),i=t(1475),o=t(25190),r=t(16833),c=!0;n.default=(0,o.Z)((0,r.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"SOLID Principles in JavaScript"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(i.Y3,{activeQuestionIndex:17,totalQuestions:20,index:17,question:"Which SOLID principle suggests that abstractions should not depend on details?",options:["Single Responsibility Principle","Open/Closed Principle","Dependency Inversion Principle","Interface Segregation Principle"],code:"// Before:\nclass UserService {\n  constructor() {\n    this.repository = new MySQLRepository();\n    this.logger = new FileLogger();\n  }\n}\n\n// After:\nclass UserService {\n  constructor(\n    private repository: Repository,\n    private logger: Logger\n  ) {}\n}",nextQuestionPath:"what-solid-principle-is-being-violated-in-this-notification-system",correctAnswer:3,explanation:"This example demonstrates the Dependency Inversion Principle (DIP). In the 'Before' version, UserService directly depends on concrete implementations (MySQLRepository and FileLogger). The 'After' version depends on abstractions (Repository and Logger interfaces) instead. This makes the code more flexible, testable, and maintainable as different implementations can be injected without changing UserService.",id:1418,quizId:62},17)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=27321)}),_N_E=e.O()}]);