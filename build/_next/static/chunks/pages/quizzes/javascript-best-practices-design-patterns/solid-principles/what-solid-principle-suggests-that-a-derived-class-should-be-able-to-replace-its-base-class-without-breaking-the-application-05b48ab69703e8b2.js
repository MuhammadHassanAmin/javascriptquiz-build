(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[12327],{43429:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/solid-principles/what-solid-principle-suggests-that-a-derived-class-should-be-able-to-replace-its-base-class-without-breaking-the-application",function(){return n(33279)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var s=n(85893),i=n(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",className:o}=e,a=(0,i.useRef)(null),r=(0,i.useRef)(!1),[l,c]=(0,i.useState)(!1);return((0,i.useEffect)(()=>(c(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,i.useEffect)(()=>{if(l){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))a.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{a.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0)}}}},[l]),l)?(0,s.jsx)("ins",{ref:a,className:"adsbygoogle ".concat(o),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n}):null};function a(e){return class extends i.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(o,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},33279:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return r}});var s=n(85893),i=n(1475),o=n(41354),a=n(16833),r=!0;t.default=(0,o.Z)((0,a.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"SOLID Principles in JavaScript"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(i.Y3,{activeQuestionIndex:14,totalQuestions:20,index:14,question:"What SOLID principle suggests that a derived class should be able to replace its base class without breaking the application?",options:["Single Responsibility Principle","Open/Closed Principle","Liskov Substitution Principle","Interface Segregation Principle"],code:"class File {\n  read(): string { return 'file content'; }\n  write(content: string): void { /* write content */ }\n}\n\nclass ReadOnlyFile extends File {\n  write(content: string): void {\n    throw new Error('Cannot write to read-only file');\n  }\n}",nextQuestionPath:"which-solid-principle-is-being-applied-in-this-payment-processing-implementation",correctAnswer:3,explanation:"This code violates the Liskov Substitution Principle (LSP). The ReadOnlyFile class breaks the contract established by its base File class by throwing an error in the write method. According to LSP, if a program is using a base class, it should be able to use any of its derived classes without knowing it. A better design would be to separate read and write capabilities into different interfaces.",id:1415,quizId:62},14)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=43429)}),_N_E=e.O()}]);