(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[99741],{73458:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-best-practices-design-patterns/solid-principles/how-does-this-code-violate-the-dependency-inversion-principle",function(){return s(62660)}])},16833:function(e,n,s){"use strict";s.d(n,{Z:function(){return a}});var t=s(85893),i=s(67294),o=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:s="6753219060",adFormat:o="auto",className:a,fullWidthResponsive:c="true",style:r={}}=e,l=(0,i.useRef)(null),d=(0,i.useRef)(!1),[u,p]=(0,i.useState)(!1);return((0,i.useEffect)(()=>(p(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,i.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[u]),u)?(0,t.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(a),style:{display:"block",...r},"data-ad-client":n,"data-ad-slot":s,"data-ad-format":o,"data-full-width-responsive":c}):null};function a(e){return class extends i.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,t.jsx)("div",{children:(0,t.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,t.jsx)("div",{children:(0,t.jsx)(e,{...this.props})}),(0,t.jsxs)("div",{children:[(0,t.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,t.jsx)(o,{adSlot:"6208304795",className:"h-[336px]"})}),(0,t.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,t.jsx)(o,{adSlot:"6208304795",className:"h-[336px]"})})]})]})})}constructor(e){super(e)}}}},62660:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return c}});var t=s(85893),i=s(1475),o=s(25190),a=s(16833),c=!0;n.default=(0,o.Z)((0,a.Z)(()=>(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"SOLID Principles in JavaScript"}),(0,t.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,t.jsx)(i.Y3,{activeQuestionIndex:4,totalQuestions:20,index:4,question:"How does this code violate the Dependency Inversion Principle?",options:["It doesn't use async/await","The class names are not descriptive enough","High-level module depends on low-level module directly","It violates single responsibility"],code:"class EmailNotifier {\n  sendEmail(user, message) {\n    // Email sending logic\n  }\n}\n\nclass UserService {\n  constructor() {\n    this.notifier = new EmailNotifier();\n  }\n\n  notifyUser(user, message) {\n    this.notifier.sendEmail(user, message);\n  }\n}",nextQuestionPath:"which-solid-principle-suggests-creating-specific-interfaces-instead-of-one-general-purpose-interface",correctAnswer:3,explanation:"This code violates the Dependency Inversion Principle (DIP). DIP states that high-level modules should not depend on low-level modules; both should depend on abstractions. UserService directly depends on EmailNotifier concrete class. A better approach would be to depend on an INotifier interface, allowing different notification implementations to be injected: email, SMS, push notifications, etc.",id:1405,quizId:62},4)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=73458)}),_N_E=e.O()}]);