(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5450],{2491:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/advanced-javascript/memory-management-garbage-collection/what-memory-optimization-could-improve-this-code",function(){return n(4190)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return s}});var a=n(85893),o=n(67294),r=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",className:r}=e,s=(0,o.useRef)(null),i=(0,o.useRef)(!1),[c,l]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(c){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))s.current&&!i.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),i.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{s.current&&!i.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),i.current=!0)}}}},[c]),c)?(0,a.jsx)("ins",{ref:s,className:"adsbygoogle ".concat(r),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n}):null};function s(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,a.jsx)("div",{children:(0,a.jsx)(r,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,a.jsx)("div",{children:(0,a.jsx)(e,{...this.props})}),(0,a.jsx)("div",{children:(0,a.jsx)(r,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},4190:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return i}});var a=n(85893),o=n(1475),r=n(41354),s=n(16833),i=!0;t.default=(0,r.Z)((0,s.Z)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Memory Management & Garbage Collection"}),(0,a.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,a.jsx)(o.Y3,{activeQuestionIndex:11,totalQuestions:40,index:11,question:"What memory optimization could improve this code?",options:["Using a for loop instead of map","Creating a smaller temporary array","Processing the data in chunks","Avoiding the creation of the large intermediate array altogether"],code:"function processData(data) {\n  // Create a million element array\n  const processed = new Array(1000000).fill(0).map((_, i) => data[i % data.length]);\n  \n  return processed.length;\n}\n\nfunction handleRequest(request) {\n  const result = processData(request.data);\n  return { result };\n}",nextQuestionPath:"how-does-the-concept-of-generations-apply-to-modern-garbage-collection-algorithms",correctAnswer:4,explanation:"The optimal memory optimization would be avoiding the large intermediate array: 1) The current code creates a massive array with a million elements just to return its length, 2) This large array is unnecessarily consuming memory since only its length is used, 3) The function could simply calculate the length without creating the array, 4) A more memory-efficient approach would directly compute the result with: return Math.min(1000000, data.length), 5) If actual processing of each element is needed, consider using a generator or processing in smaller chunks, 6) Large intermediate data structures are a common source of memory inefficiency, 7) When working with large datasets, always question whether materialization of full results is necessary, 8) Memory optimization often involves rethinking the algorithm to avoid unnecessary allocations rather than just optimizing existing allocations.",id:952,quizId:42},11)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=2491)}),_N_E=e.O()}]);