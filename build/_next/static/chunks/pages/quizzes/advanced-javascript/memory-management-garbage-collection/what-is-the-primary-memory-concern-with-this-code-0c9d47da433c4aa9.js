(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[67815],{97785:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/advanced-javascript/memory-management-garbage-collection/what-is-the-primary-memory-concern-with-this-code",function(){return n(19537)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var o=n(85893),s=n(67294),r=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:r="auto",className:a,fullWidthResponsive:c="true",style:i={}}=e,l=(0,s.useRef)(null),m=(0,s.useRef)(!1),[d,u]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(u(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!m.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),m.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!m.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),m.current=!0)}}}},[d]),d)?(0,o.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(a),style:{display:"block",...i},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":r,"data-full-width-responsive":c}):null};function a(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,o.jsx)("div",{children:(0,o.jsx)(r,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,o.jsx)("div",{children:(0,o.jsx)(e,{...this.props})}),(0,o.jsx)("div",{children:(0,o.jsx)(r,{adSlot:"6208304795",className:"h-[336px] top-0 sticky",style:{display:"inline-block",height:"280px"}})})]})})}constructor(e){super(e)}}}},19537:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return c}});var o=n(85893),s=n(1475),r=n(25190),a=n(16833),c=!0;t.default=(0,r.Z)((0,a.Z)(()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Memory Management & Garbage Collection"}),(0,o.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,o.jsx)(s.Y3,{activeQuestionIndex:15,totalQuestions:40,index:15,question:"What is the primary memory concern with this code?",options:["Creating elements that aren't attached to the DOM still consumes memory","Using a for loop is memory inefficient","The function creates too many local variables","String concatenation causes memory issues"],code:"function createElements(num) {\n  const elements = [];\n  for (let i = 0; i < num; i++) {\n    const el = document.createElement('div');\n    el.textContent = 'Element ' + i;\n    elements.push(el);\n  }\n  return elements;\n}\n\nconst allElements = createElements(10000);",nextQuestionPath:"what-is-the-purpose-of-the-chrome-devtools-memory-panel",correctAnswer:1,explanation:"The primary memory concern is creating numerous unattached DOM elements: 1) DOM elements consume memory whether they're attached to the document or not, 2) Creating 10,000 elements at once consumes significant memory even if they're never rendered, 3) The array holding references to all elements prevents them from being garbage collected, 4) DOM elements are particularly memory-intensive compared to plain JavaScript objects, 5) A better approach would be to create elements only when needed or implement virtualization for large lists, 6) If all elements are truly needed, consider techniques like document fragments for batch DOM operations, 7) This pattern can lead to performance issues beyond just memory consumption, 8) Large collections of DOM elements are a common source of memory problems in web applications.",id:956,quizId:42},15)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=97785)}),_N_E=e.O()}]);