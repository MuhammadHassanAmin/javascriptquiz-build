(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[163],{41722:function(e,t,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/advanced-javascript/memory-management-garbage-collection/why-is-weakmap-appropriate-for-this-caching-implementation",function(){return s(82449)}])},16833:function(e,t,s){"use strict";s.d(t,{Z:function(){return o}});var a=s(85893),n=s(67294),c=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:s="6753219060",adFormat:c="auto",className:o,fullWidthResponsive:r="true",style:i={}}=e,l=(0,n.useRef)(null),d=(0,n.useRef)(!1),[u,h]=(0,n.useState)(!1);return((0,n.useEffect)(()=>(h(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,n.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[u]),u)?(0,a.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(o),style:{display:"block",...i},"data-ad-client":t,"data-ad-slot":s,"data-ad-format":c,"data-full-width-responsive":r}):null};function o(e){return class extends n.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,a.jsx)("div",{children:(0,a.jsx)(c,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,a.jsx)("div",{children:(0,a.jsx)(e,{...this.props})}),(0,a.jsxs)("div",{children:[(0,a.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,a.jsx)(c,{adSlot:"6208304795",className:"h-[336px]",style:{display:"block",width:"100%",height:"336px"}})}),(0,a.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,a.jsx)(c,{adSlot:"6208304795",className:"h-[336px]",style:{display:"block",width:"100%",height:"336px"}})})]})]})})}constructor(e){super(e)}}}},82449:function(e,t,s){"use strict";s.r(t),s.d(t,{__N_SSG:function(){return r}});var a=s(85893),n=s(1475),c=s(25190),o=s(16833),r=!0;t.default=(0,c.Z)((0,o.Z)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Memory Management & Garbage Collection"}),(0,a.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,a.jsx)(n.Y3,{activeQuestionIndex:31,totalQuestions:40,index:31,question:"Why is WeakMap appropriate for this caching implementation?",options:["It's faster than using a regular Map","It allows string keys unlike regular Maps","It doesn't prevent the userObject keys from being garbage collected when no longer used elsewhere","It automatically expires cache entries after a certain time"],code:"const userCache = new WeakMap();\n\nfunction getUser(userObject) {\n  if (!userCache.has(userObject)) {\n    userCache.set(userObject, {\n      name: userObject.name,\n      accessCount: 0,\n      lastAccess: Date.now()\n    });\n  }\n  \n  const userData = userCache.get(userObject);\n  userData.accessCount++;\n  userData.lastAccess = Date.now();\n  \n  return userData;\n}",nextQuestionPath:"what-memory-related-issues-can-occur-when-using-json-stringify-on-circular-object-references",correctAnswer:3,explanation:"WeakMap is appropriate here because it doesn't prevent garbage collection of keys: 1) It holds weak references to the userObject keys, allowing them to be collected when no longer referenced elsewhere, 2) This prevents memory leaks that would occur with a regular Map, which would keep all userObjects in memory indefinitely, 3) The cache automatically 'cleans itself' as objects become unreachable, 4) This creates a self-managing cache that follows the lifecycle of the key objects, 5) It's ideal for this metadata/caching scenario where cache entries should expire with their associated objects, 6) No explicit cache invalidation is needed to prevent memory leaks, 7) The tradeoff is that WeakMap keys must be objects, not primitive values, 8) This demonstrates a memory-conscious design pattern for object-related caching.",id:972,quizId:42},31)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=41722)}),_N_E=e.O()}]);