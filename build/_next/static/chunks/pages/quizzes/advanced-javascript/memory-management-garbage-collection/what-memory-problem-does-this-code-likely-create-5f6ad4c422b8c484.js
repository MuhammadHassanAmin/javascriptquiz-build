(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4888],{90281:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/advanced-javascript/memory-management-garbage-collection/what-memory-problem-does-this-code-likely-create",function(){return a(20374)}])},16833:function(e,t,a){"use strict";a.d(t,{Z:function(){return r}});var n=a(85893),s=a(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:a="6753219060",adFormat:o="auto",className:r,fullWidthResponsive:i="true",style:l={}}=e,c=(0,s.useRef)(null),d=(0,s.useRef)(!1),[u,m]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(m(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))c.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{c.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[u]),u)?(0,n.jsx)("ins",{ref:c,className:"adsbygoogle ".concat(r),style:{display:"block",...l},"data-ad-client":t,"data-ad-slot":a,"data-ad-format":o,"data-full-width-responsive":i}):null};function r(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,n.jsx)("div",{children:(0,n.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,n.jsx)("div",{children:(0,n.jsx)(e,{...this.props})}),(0,n.jsx)("div",{children:(0,n.jsx)(o,{adSlot:"6208304795",className:"h-[100px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},20374:function(e,t,a){"use strict";a.r(t),a.d(t,{__N_SSG:function(){return i}});var n=a(85893),s=a(1475),o=a(25190),r=a(16833),i=!0;t.default=(0,o.Z)((0,r.Z)(()=>(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Memory Management & Garbage Collection"}),(0,n.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,n.jsx)(s.Y3,{activeQuestionIndex:23,totalQuestions:40,index:23,question:"What memory problem does this code likely create?",options:["The spread operator causes stack overflow","The data array grows unbounded over time","Creating random numbers is memory intensive","SetInterval itself causes memory leaks"],code:"let data = [];\n\nfunction fetchData() {\n  // Simulates fetching data from a server\n  const newItems = new Array(10000).fill().map(() => ({\n    id: Math.random(),\n    value: Math.random()\n  }));\n  \n  // Append new items to existing data\n  data = [...data, ...newItems];\n  \n  display(data);\n}\n\n// Call this function repeatedly\nsetInterval(fetchData, 5000);",nextQuestionPath:"how-do-browser-developer-tools-typically-help-identify-memory-leaks",correctAnswer:2,explanation:"This code creates an unbounded growing array over time: 1) Each call to fetchData adds 10,000 new items to the data array, 2) The array continuously grows because data is never cleared or limited, 3) With regular calls via setInterval, this creates an ever-increasing memory consumption, 4) This pattern will eventually lead to performance degradation or crashes, 5) A better approach would be implementing a sliding window, limiting the array size, or clearing unnecessary old data, 6) This is a common pattern in real-time data applications that can lead to memory issues, 7) Memory leaks of this nature are particularly dangerous because they accumulate slowly over time, 8) Implementing proper data lifecycle management is essential for long-running applications.",id:964,quizId:42},23)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=90281)}),_N_E=e.O()}]);