(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[96090],{83637:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/advanced-javascript/memory-management-garbage-collection/what-memory-issue-does-this-code-demonstrate",function(){return n(7088)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return r}});var s=n(85893),o=n(67294),a=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",className:a}=e,r=(0,o.useRef)(null),c=(0,o.useRef)(!1),[i,l]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(i){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))r.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{r.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0)}}}},[i]),i)?(0,s.jsx)("ins",{ref:r,className:"adsbygoogle ".concat(a),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n}):null};function r(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(a,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},7088:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return c}});var s=n(85893),o=n(1475),a=n(41354),r=n(16833),c=!0;t.default=(0,a.Z)((0,r.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Memory Management & Garbage Collection"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(o.Y3,{activeQuestionIndex:19,totalQuestions:40,index:19,question:"What memory issue does this code demonstrate?",options:["Stack overflow from too many function calls","Excessive memory usage from capturing unnecessary variables in closures","The array grows too large","The console.log statement creates memory leaks"],code:'const heavyData = { /* large data structure */ };\n\nfunction createClosure() {\n  const data = heavyData;\n  \n  return function() {\n    console.log("Closure created");\n    // Never actually uses data\n  };\n}\n\nconst closures = [];\nfor (let i = 0; i < 1000; i++) {\n  closures.push(createClosure());\n}',nextQuestionPath:"what-is-a-key-benefit-of-using-object-pooling-for-memory-management-in-javascript",correctAnswer:2,explanation:"This code demonstrates excessive memory usage from unnecessary closure variables: 1) Each closure captures a reference to the heavyData object in its lexical environment, 2) Despite never actually using the data, each closure keeps it in memory, 3) With 1000 closures, the same large data structure is effectively referenced 1000 times, 4) This pattern multiplies memory consumption without any benefit, 5) The issue is that closures capture their entire enclosing environment, not just the variables they use, 6) A better approach would be to avoid including the heavy data in the closure's scope if it's not needed, 7) This demonstrates how closures can inadvertently cause memory inefficiency, 8) Understanding closure behavior is crucial for memory-efficient JavaScript.",id:960,quizId:42},19)})]})))}},function(e){e.O(0,[41966,25675,61793,92888,49774,40179],function(){return e(e.s=83637)}),_N_E=e.O()}]);