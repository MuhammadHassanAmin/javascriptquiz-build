(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[62921],{38057:function(e,t,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/advanced-javascript/memory-management-garbage-collection/which-javascript-data-structure-might-lead-to-memory-leaks-if-used-incorrectly-with-dom-elements",function(){return s(83990)}])},16833:function(e,t,s){"use strict";s.d(t,{Z:function(){return r}});var n=s(85893),a=s(67294),o=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:s="6753219060",adFormat:o="auto",className:r,fullWidthResponsive:i="true"}=e,c=(0,a.useRef)(null),l=(0,a.useRef)(!1),[d,u]=(0,a.useState)(!1);return((0,a.useEffect)(()=>(u(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,a.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))c.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{c.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[d]),d)?(0,n.jsx)("ins",{ref:c,className:"adsbygoogle ".concat(r),style:{display:"block"},"data-ad-client":t,"data-ad-slot":s,"data-ad-format":o,"data-full-width-responsive":i}):null};function r(e){return class extends a.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,n.jsx)("div",{children:(0,n.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,n.jsx)("div",{children:(0,n.jsx)(e,{...this.props})}),(0,n.jsx)("div",{children:(0,n.jsx)(o,{adSlot:"6208304795",className:"h-[300px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},83990:function(e,t,s){"use strict";s.r(t),s.d(t,{__N_SSG:function(){return i}});var n=s(85893),a=s(1475),o=s(25190),r=s(16833),i=!0;t.default=(0,o.Z)((0,r.Z)(()=>(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Memory Management & Garbage Collection"}),(0,n.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,n.jsx)(a.Y3,{activeQuestionIndex:18,totalQuestions:40,index:18,question:"Which JavaScript data structure might lead to memory leaks if used incorrectly with DOM elements?",options:["Arrays","WeakMap","Map","Set"],code:void 0,nextQuestionPath:"what-memory-issue-does-this-code-demonstrate",correctAnswer:3,explanation:"Map can lead to memory leaks with DOM elements if used incorrectly: 1) Map maintains strong references to its keys and values, 2) If DOM elements are used as keys in a Map, they won't be garbage collected even if removed from the document, 3) This creates a memory leak if the Map is long-lived and elements are no longer needed, 4) WeakMap is specifically designed to avoid this problem by holding weak references to keys, 5) Maps are particularly problematic in scenarios like caching or storing metadata about DOM elements, 6) The issue extends to Set as well, which also maintains strong references, 7) This is a common pitfall when storing DOM references in data structures, 8) The solution is to either use WeakMap/WeakSet or ensure proper cleanup by removing entries when DOM elements are no longer needed.",id:959,quizId:42},18)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=38057)}),_N_E=e.O()}]);