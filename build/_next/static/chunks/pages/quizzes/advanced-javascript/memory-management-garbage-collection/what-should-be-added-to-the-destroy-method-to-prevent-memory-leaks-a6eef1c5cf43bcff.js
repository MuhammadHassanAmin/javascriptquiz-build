(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[46776],{61553:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/advanced-javascript/memory-management-garbage-collection/what-should-be-added-to-the-destroy-method-to-prevent-memory-leaks",function(){return n(78994)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return l}});var s=n(85893),o=n(67294),i=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",className:i}=e,l=(0,o.useRef)(null),r=(0,o.useRef)(!1),[c,a]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(a(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(c){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{l.current&&!r.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),r.current=!0)}}}},[c]),c)?(0,s.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(i),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n}):null};function l(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(i,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},78994:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return r}});var s=n(85893),o=n(1475),i=n(25190),l=n(16833),r=!0;t.default=(0,i.Z)((0,l.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Memory Management & Garbage Collection"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(o.Y3,{activeQuestionIndex:17,totalQuestions:40,index:17,question:"What should be added to the destroy method to prevent memory leaks?",options:["this.element = null;","delete this.handleClick;","this.element.removeEventListener('click', this.handleClick);","this.handleClick = null;"],code:"class Component {\n  constructor(element) {\n    this.element = element;\n    this.handleClick = this.handleClick.bind(this);\n    this.element.addEventListener('click', this.handleClick);\n  }\n  handleClick() {\n    console.log('Clicked');\n  }\n  destroy() {\n    // Component cleanup\n  }\n}",nextQuestionPath:"which-javascript-data-structure-might-lead-to-memory-leaks-if-used-incorrectly-with-dom-elements",correctAnswer:3,explanation:"The destroy method should remove the event listener: 1) Event listeners create strong references between DOM elements and callback functions, 2) Failing to remove event listeners can prevent objects from being garbage collected, 3) The correct cleanup requires explicitly calling removeEventListener with the same function reference, 4) Setting this.element = null isn't sufficient because the event listener maintains a reference, 5) The handleClick method is bound in the constructor specifically to maintain the same reference for proper removal, 6) This pattern of binding in constructor and removing in destroy is a common best practice, 7) Proper cleanup is especially important in components that may be created and destroyed frequently, 8) Simply nullifying references without removing listeners is a common cause of memory leaks in web applications.",id:958,quizId:42},17)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=61553)}),_N_E=e.O()}]);