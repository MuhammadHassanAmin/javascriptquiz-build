(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[30248],{57087:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-data-structures-algorithms/working-with-graphs-trees/what-binary-search-tree-property-is-maintained-by-this-insert-implementation",function(){return n(75621)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var r=n(85893),s=n(67294),i=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:i="auto",className:a,fullWidthResponsive:o="true"}=e,c=(0,s.useRef)(null),l=(0,s.useRef)(!1),[u,d]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(d(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))c.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{c.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[u]),u)?(0,r.jsx)("ins",{ref:c,className:"adsbygoogle ".concat(a),style:{display:"block"},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":i,"data-full-width-responsive":o}):null};function a(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,r.jsx)("div",{children:(0,r.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,r.jsx)("div",{children:(0,r.jsx)(e,{...this.props})}),(0,r.jsx)("div",{children:(0,r.jsx)(i,{adSlot:"6208304795",className:"h-[300px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},75621:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return o}});var r=n(85893),s=n(1475),i=n(25190),a=n(16833),o=!0;t.default=(0,i.Z)((0,a.Z)(()=>(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Working with Graphs & Trees"}),(0,r.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,r.jsx)(s.Y3,{activeQuestionIndex:2,totalQuestions:21,index:2,question:"What Binary Search Tree property is maintained by this insert implementation?",options:["Tree height balance","Node color properties","Left-right value ordering","Parent-child references"],code:"class BinarySearchTree {\n  constructor() {\n    this.root = null;\n  }\n  \n  insert(value) {\n    const newNode = { value, left: null, right: null };\n    if (!this.root) {\n      this.root = newNode;\n      return;\n    }\n    let current = this.root;\n    while (true) {\n      if (value < current.value) {\n        if (!current.left) {\n          current.left = newNode;\n          break;\n        }\n        current = current.left;\n      } else {\n        if (!current.right) {\n          current.right = newNode;\n          break;\n        }\n        current = current.right;\n      }\n    }\n  }",nextQuestionPath:"what-tree-traversal-order-does-this-implementation-produce",correctAnswer:3,explanation:"This insert method maintains BST ordering because: 1) Ensures all left child values are less than parent, 2) Ensures all right child values are greater than parent, 3) Preserves binary search tree invariant during insertion, 4) Enables O(log n) average case search operations, 5) Maintains path to insertion point through comparisons, 6) Handles both empty tree and existing tree cases, 7) Uses iterative approach for memory efficiency, 8) Critical for maintaining BST search efficiency.",id:1362,quizId:60},2)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=57087)}),_N_E=e.O()}]);