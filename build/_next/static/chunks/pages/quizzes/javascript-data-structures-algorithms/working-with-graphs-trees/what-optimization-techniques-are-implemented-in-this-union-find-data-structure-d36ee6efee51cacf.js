(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[43942],{94501:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-data-structures-algorithms/working-with-graphs-trees/what-optimization-techniques-are-implemented-in-this-union-find-data-structure",function(){return e(73040)}])},16833:function(n,t,e){"use strict";e.d(t,{Z:function(){return r}});var s=e(85893),i=e(67294),o=n=>{let{adClient:t="ca-pub-7544108447932228",adSlot:e="6753219060",className:o}=n,r=(0,i.useRef)(null),a=(0,i.useRef)(!1),[c,d]=(0,i.useState)(!1);return((0,i.useEffect)(()=>(d(!0),()=>{let n=document.getElementById("__next");n&&n.removeAttribute("style")}),[]),(0,i.useEffect)(()=>{if(c){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))r.current&&!a.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),a.current=!0);else{let n=document.createElement("script");n.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",n.async=!0,n.crossOrigin="anonymous",document.body.appendChild(n),n.onload=()=>{r.current&&!a.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),a.current=!0)}}}},[c]),c)?(0,s.jsx)("ins",{ref:r,className:"adsbygoogle ".concat(o),style:{display:"block"},"data-ad-client":t,"data-ad-slot":e}):null};function r(n){return class extends i.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,s.jsx)("div",{children:(0,s.jsx)(n,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(o,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(n){super(n)}}}},73040:function(n,t,e){"use strict";e.r(t),e.d(t,{__N_SSG:function(){return a}});var s=e(85893),i=e(1475),o=e(41354),r=e(16833),a=!0;t.default=(0,o.Z)((0,r.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Working with Graphs & Trees"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(i.Y3,{activeQuestionIndex:13,totalQuestions:21,index:13,question:"What optimization techniques are implemented in this Union-Find data structure?",options:["Path compression only","Union by rank only","Both path compression and union by rank","Neither optimization"],code:"class DisjointSet {\n  constructor() {\n    this.parent = {};\n    this.rank = {};\n  }\n  \n  makeSet(x) {\n    this.parent[x] = x;\n    this.rank[x] = 0;\n  }\n  \n  find(x) {\n    if (this.parent[x] !== x) {\n      this.parent[x] = this.find(this.parent[x]);\n    }\n    return this.parent[x];\n  }\n  \n  union(x, y) {\n    const rootX = this.find(x);\n    const rootY = this.find(y);\n    if (rootX === rootY) return;\n    \n    if (this.rank[rootX] < this.rank[rootY]) {\n      this.parent[rootX] = rootY;\n    } else if (this.rank[rootX] > this.rank[rootY]) {\n      this.parent[rootY] = rootX;\n    } else {\n      this.parent[rootY] = rootX;\n      this.rank[rootX]++;\n    }\n  }\n}",nextQuestionPath:"what-tree-traversal-order-is-used-in-this-serialization-format",correctAnswer:3,explanation:"This implements both major Union-Find optimizations because: 1) Uses path compression in find operation by updating parent pointers, 2) Implements union by rank to keep trees balanced, 3) Combines both techniques for optimal performance, 4) Achieves near-constant time operations, 5) Reduces tree height during finds, 6) Prevents skewed trees during unions, 7) Essential for efficient graph connectivity queries, 8) Common in Kruskal's MST algorithm implementation.",id:1373,quizId:60},13)})]})))}},function(n){n.O(0,[41966,25675,61793,92888,49774,40179],function(){return n(n.s=94501)}),_N_E=n.O()}]);