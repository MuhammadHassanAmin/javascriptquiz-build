(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[43942],{94501:function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-data-structures-algorithms/working-with-graphs-trees/what-optimization-techniques-are-implemented-in-this-union-find-data-structure",function(){return e(73040)}])},16833:function(t,n,e){"use strict";e.d(n,{Z:function(){return r}});var s=e(85893),i=e(67294),o=t=>{let{adClient:n="ca-pub-7544108447932228",adSlot:e="6753219060",adFormat:o="auto",className:r,fullWidthResponsive:a="true",style:c={}}=t,d=(0,i.useRef)(null),l=(0,i.useRef)(!1),[u,h]=(0,i.useState)(!1);return((0,i.useEffect)(()=>(h(!0),()=>{let t=document.getElementById("__next");t&&t.removeAttribute("style")}),[]),(0,i.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))d.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let t=document.createElement("script");t.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",t.async=!0,t.crossOrigin="anonymous",document.body.appendChild(t),t.onload=()=>{d.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[u]),u)?(0,s.jsx)("ins",{ref:d,className:"adsbygoogle ".concat(r),style:{display:"block",...c},"data-ad-client":n,"data-ad-slot":e,"data-ad-format":o,"data-full-width-responsive":a}):null};function r(t){return class extends i.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(t,{...this.props})}),(0,s.jsxs)("div",{children:[(0,s.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,s.jsx)(o,{adSlot:"6208304795",className:"h-[336px]",style:{display:"block",width:"100%",height:"336px"}})}),(0,s.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,s.jsx)(o,{adSlot:"6208304795",className:"h-[336px]",style:{display:"block",width:"100%",height:"336px"}})})]})]})})}constructor(t){super(t)}}}},73040:function(t,n,e){"use strict";e.r(n),e.d(n,{__N_SSG:function(){return a}});var s=e(85893),i=e(1475),o=e(25190),r=e(16833),a=!0;n.default=(0,o.Z)((0,r.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Working with Graphs & Trees"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(i.Y3,{activeQuestionIndex:13,totalQuestions:21,index:13,question:"What optimization techniques are implemented in this Union-Find data structure?",options:["Path compression only","Union by rank only","Both path compression and union by rank","Neither optimization"],code:"class DisjointSet {\n  constructor() {\n    this.parent = {};\n    this.rank = {};\n  }\n  \n  makeSet(x) {\n    this.parent[x] = x;\n    this.rank[x] = 0;\n  }\n  \n  find(x) {\n    if (this.parent[x] !== x) {\n      this.parent[x] = this.find(this.parent[x]);\n    }\n    return this.parent[x];\n  }\n  \n  union(x, y) {\n    const rootX = this.find(x);\n    const rootY = this.find(y);\n    if (rootX === rootY) return;\n    \n    if (this.rank[rootX] < this.rank[rootY]) {\n      this.parent[rootX] = rootY;\n    } else if (this.rank[rootX] > this.rank[rootY]) {\n      this.parent[rootY] = rootX;\n    } else {\n      this.parent[rootY] = rootX;\n      this.rank[rootX]++;\n    }\n  }\n}",nextQuestionPath:"what-tree-traversal-order-is-used-in-this-serialization-format",correctAnswer:3,explanation:"This implements both major Union-Find optimizations because: 1) Uses path compression in find operation by updating parent pointers, 2) Implements union by rank to keep trees balanced, 3) Combines both techniques for optimal performance, 4) Achieves near-constant time operations, 5) Reduces tree height during finds, 6) Prevents skewed trees during unions, 7) Essential for efficient graph connectivity queries, 8) Common in Kruskal's MST algorithm implementation.",id:1373,quizId:60},13)})]})))}},function(t){t.O(0,[41966,25675,82893,92888,49774,40179],function(){return t(t.s=94501)}),_N_E=t.O()}]);