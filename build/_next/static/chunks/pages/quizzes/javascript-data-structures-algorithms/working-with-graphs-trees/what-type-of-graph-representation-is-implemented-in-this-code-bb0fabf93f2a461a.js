(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[93673],{47441:function(e,t,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/javascript-data-structures-algorithms/working-with-graphs-trees/what-type-of-graph-representation-is-implemented-in-this-code",function(){return s(70955)}])},16833:function(e,t,s){"use strict";s.d(t,{Z:function(){return r}});var n=s(85893),a=s(67294),i=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:s="6753219060",adFormat:i="auto",className:r,fullWidthResponsive:o="true",style:c={}}=e,d=(0,a.useRef)(null),l=(0,a.useRef)(!1),[u,h]=(0,a.useState)(!1);return((0,a.useEffect)(()=>(h(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,a.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))d.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{d.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[u]),u)?(0,n.jsx)("ins",{ref:d,className:"adsbygoogle ".concat(r),style:{display:"block",...c},"data-ad-client":t,"data-ad-slot":s,"data-ad-format":i,"data-full-width-responsive":o}):null};function r(e){return class extends a.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,n.jsx)("div",{children:(0,n.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,n.jsx)("div",{children:(0,n.jsx)(e,{...this.props})}),(0,n.jsxs)("div",{children:[(0,n.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,n.jsx)(i,{adSlot:"6208304795",className:"h-[336px]",style:{display:"block",width:"100%",height:"336px"}})}),(0,n.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,n.jsx)(i,{adSlot:"6208304795",className:"h-[336px]",style:{display:"block",width:"100%",height:"336px"}})})]})]})})}constructor(e){super(e)}}}},70955:function(e,t,s){"use strict";s.r(t),s.d(t,{__N_SSG:function(){return o}});var n=s(85893),a=s(1475),i=s(25190),r=s(16833),o=!0;t.default=(0,i.Z)((0,r.Z)(()=>(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Working with Graphs & Trees"}),(0,n.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,n.jsx)(a.Y3,{activeQuestionIndex:1,totalQuestions:21,index:1,question:"What type of graph representation is implemented in this code?",options:["Edge List","Adjacency Matrix","Adjacency List","Incidence Matrix"],code:"class Graph {\n  constructor() {\n    this.adjacencyList = {};\n  }\n  \n  addVertex(vertex) {\n    if (!this.adjacencyList[vertex]) {\n      this.adjacencyList[vertex] = [];\n    }\n  }\n  \n  addEdge(vertex1, vertex2) {\n    this.adjacencyList[vertex1].push(vertex2);\n    this.adjacencyList[vertex2].push(vertex1);\n  }\n}",nextQuestionPath:"what-binary-search-tree-property-is-maintained-by-this-insert-implementation",correctAnswer:3,explanation:"This implements an adjacency list representation because: 1) Uses a hash table to store vertices as keys, 2) Each vertex maps to an array of its adjacent vertices, 3) Provides efficient storage for sparse graphs, 4) Enables O(1) vertex addition, 5) Edge lookup is O(degree) where degree is number of adjacent vertices, 6) Memory usage is O(V + E) where V is vertices and E is edges, 7) Common implementation choice for real-world graphs, 8) Suitable for both directed and undirected graphs.",id:1361,quizId:60},1)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=47441)}),_N_E=e.O()}]);