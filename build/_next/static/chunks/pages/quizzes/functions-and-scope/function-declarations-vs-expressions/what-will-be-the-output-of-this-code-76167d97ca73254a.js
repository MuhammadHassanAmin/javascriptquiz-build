(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[65237],{9985:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/functions-and-scope/function-declarations-vs-expressions/what-will-be-the-output-of-this-code",function(){return n(44937)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var o=n(85893),s=n(67294),c=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:c="auto",className:i,fullWidthResponsive:r="true",style:a={}}=e,u=(0,s.useRef)(null),l=(0,s.useRef)(!1),[d,h]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(h(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))u.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{u.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[d]),d)?(0,o.jsx)("ins",{ref:u,className:"adsbygoogle ".concat(i),style:{display:"block",...a},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":c,"data-full-width-responsive":r}):null};function i(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,o.jsx)("div",{children:(0,o.jsx)(c,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,o.jsx)("div",{children:(0,o.jsx)(e,{...this.props})}),(0,o.jsx)("div",{children:(0,o.jsx)(c,{adSlot:"6208304795",className:"h-[336px] top-0 sticky",style:{display:"inline-block",height:"280px"}})})]})})}constructor(e){super(e)}}}},44937:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return r}});var o=n(85893),s=n(1475),c=n(25190),i=n(16833),r=!0;t.default=(0,c.Z)((0,i.Z)(()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Function Declarations vs Expressions"}),(0,o.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,o.jsx)(s.Y3,{activeQuestionIndex:16,totalQuestions:20,index:16,question:"What will be the output of this code?",options:["0","1","2","undefined"],code:"function createCounter() {\n  let count = 0;\n  return {\n    increment: function() { count += 1; },\n    getCount: function() { return count; }\n  };\n}\nconst counter = createCounter();\ncounter.increment();\ncounter.increment();\nconsole.log(counter.getCount());",nextQuestionPath:"what-will-this-code-output",correctAnswer:3,explanation:"This code will output `2`. It demonstrates a practical use of closures to create a private variable. The `createCounter` function defines a local variable `count` and returns an object with two methods, `increment` and `getCount`. Both methods form closures over the `count` variable, meaning they maintain access to it even after `createCounter` has finished executing. When we call `createCounter()`, it initializes `count` to 0 and returns the object with the two methods. We store this object in `counter`. Then we call `counter.increment()` twice, which adds 1 to `count` each time, bringing its value to 2. Finally, we call `counter.getCount()`, which returns the current value of `count`, which is 2. The `count` variable is privateâ€”it can't be accessed directly from outside the closure, only through the provided methods. This encapsulation pattern is commonly used in JavaScript to create private state, similar to how other languages use private class fields.",id:197,quizId:8},16)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=9985)}),_N_E=e.O()}]);