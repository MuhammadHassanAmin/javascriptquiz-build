(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[95448],{12633:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/functions-and-scope/function-declarations-vs-expressions/what-will-this-code-output",function(){return t(25556)}])},16833:function(e,n,t){"use strict";t.d(n,{Z:function(){return a}});var o=t(85893),s=t(67294),i=e=>{let{adClient:n="ca-pub-7544108447932228",adSlot:t="6753219060",className:i}=e,a=(0,s.useRef)(null),c=(0,s.useRef)(!1),[l,r]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(r(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(l){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))a.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{a.current&&!c.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),c.current=!0)}}}},[l]),l)?(0,o.jsx)("ins",{ref:a,className:"adsbygoogle ".concat(i),style:{display:"block"},"data-ad-client":n,"data-ad-slot":t}):null};function a(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,o.jsx)("div",{children:(0,o.jsx)(i,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),(0,o.jsx)("div",{children:(0,o.jsx)(e,{...this.props})}),(0,o.jsx)("div",{children:(0,o.jsx)(i,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}constructor(e){super(e)}}}},25556:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return c}});var o=t(85893),s=t(1475),i=t(25190),a=t(16833),c=!0;n.default=(0,i.Z)((0,a.Z)(()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Function Declarations vs Expressions"}),(0,o.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,o.jsx)(s.Y3,{activeQuestionIndex:17,totalQuestions:20,index:17,question:"What will this code output?",options:["10","20","undefined","ReferenceError"],code:"const x = 10;\nfunction foo() {\n  console.log(x);\n  var x = 20;\n}\nfoo();",nextQuestionPath:"which-statement-about-the-arguments-object-is-true",correctAnswer:3,explanation:"This code will output `undefined`. This example demonstrates variable hoisting and shadowing within function scope. Even though there's a global `const x = 10`, inside the function `foo`, the local declaration `var x = 20` is hoisted. This means the variable declaration (but not its assignment) is moved to the top of the function scope. So within `foo`, the code behaves as if it were written:\n```javascript\nfunction foo() {\n  var x; // hoisted declaration, initially undefined\n  console.log(x); // logs undefined\n  x = 20; // assignment happens here\n}\n```\nThe local `x` shadows (takes precedence over) the global `x`, so the global `x` is inaccessible within `foo` once a local `x` is declared. This is why `console.log(x)` outputs `undefined`â€”it's accessing the hoisted but not yet assigned local variable, not the global constant. This behavior is specific to `var`; if `let` or `const` were used instead, we would get a ReferenceError due to the temporal dead zone (accessing a variable before its declaration).",id:198,quizId:8},17)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=12633)}),_N_E=e.O()}]);