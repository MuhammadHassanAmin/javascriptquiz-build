(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[10838],{73653:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/functions-and-scope/function-currying/what-concept-is-being-demonstrated-in-this-code",function(){return n(91994)}])},16833:function(t,e,n){"use strict";n.d(e,{Z:function(){return a}});var s=n(85893),i=n(67294),o=t=>{let{adClient:e="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:o="auto",className:a,fullWidthResponsive:c="true",style:r={}}=t,l=(0,i.useRef)(null),d=(0,i.useRef)(!1),[u,p]=(0,i.useState)(!1);return((0,i.useEffect)(()=>(p(!0),()=>{let t=document.getElementById("__next");t&&t.removeAttribute("style")}),[]),(0,i.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let t=document.createElement("script");t.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",t.async=!0,t.crossOrigin="anonymous",document.body.appendChild(t),t.onload=()=>{l.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[u]),u)?(0,s.jsx)("ins",{ref:l,className:"adsbygoogle ".concat(a),style:{display:"block",...r},"data-ad-client":e,"data-ad-slot":n,"data-ad-format":o,"data-full-width-responsive":c}):null};function a(t){return class extends i.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(o,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(t,{...this.props})}),(0,s.jsxs)("div",{children:[(0,s.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,s.jsx)(o,{adSlot:"6208304795",className:"h-[336px]"})}),(0,s.jsx)("div",{className:"max-h-[336] top-0 sticky",children:(0,s.jsx)(o,{adSlot:"6208304795",className:"h-[336px]"})})]})]})})}constructor(t){super(t)}}}},91994:function(t,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return c}});var s=n(85893),i=n(1475),o=n(25190),a=n(16833),c=!0;e.default=(0,o.Z)((0,a.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Function Currying"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(i.Y3,{activeQuestionIndex:15,totalQuestions:20,index:15,question:"What concept is being demonstrated in this code?",options:["Function overloading","Function composition with a pipeline","Recursive currying","Lazy evaluation"],code:"const pipe = (...fns) => (x) => fns.reduce((y, f) => f(y), x);\n\nconst add2 = x => x + 2;\nconst multiply3 = x => x * 3;\nconst toString = x => x.toString();\n\nconst process = pipe(add2, multiply3, toString);\nconst result = process(5);\nconsole.log(result);",nextQuestionPath:"what-would-this-code-output",correctAnswer:2,explanation:"This code demonstrates 'Function composition with a pipeline'. The `pipe` function takes multiple functions and returns a new function that passes its input through each function in sequence, from left to right. This contrasts with traditional `compose` which applies functions from right to left. When we call `process(5)`, the value 5 flows through the pipeline: first `add2` makes it 7, then `multiply3` makes it 21, and finally `toString` converts it to the string '21'. Pipelines like this are common in functional programming for creating data transformation flows, and currying makes functions more suitable for composition in such pipelines. Libraries like Ramda and lodash/fp provide similar utilities for real-world applications.",id:322,quizId:14},15)})]})))}},function(t){t.O(0,[41966,25675,82893,92888,49774,40179],function(){return t(t.s=73653)}),_N_E=t.O()}]);