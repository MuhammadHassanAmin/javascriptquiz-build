(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[23570],{31050:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/functions-and-scope/function-currying/what-pattern-does-this-code-implement",function(){return n(34645)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var o=n(85893),s=n(67294),r=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:r="auto",className:i,fullWidthResponsive:a="true",style:l={}}=e,c=(0,s.useRef)(null),d=(0,s.useRef)(!1),[u,g]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(g(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))c.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{c.current&&!d.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),d.current=!0)}}}},[u]),u)?(0,o.jsx)("ins",{ref:c,className:"adsbygoogle ".concat(i),style:{display:"block",...l},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":r,"data-full-width-responsive":a}):null};function i(e){return class extends s.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,o.jsx)("div",{children:(0,o.jsx)(r,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,o.jsx)("div",{children:(0,o.jsx)(e,{...this.props})}),(0,o.jsx)("div",{children:(0,o.jsx)(r,{adSlot:"6208304795",className:"h-[336px] top-0 sticky",style:{display:"inline-block",width:"100%",height:"280px"}})})]})})}constructor(e){super(e)}}}},34645:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return a}});var o=n(85893),s=n(1475),r=n(25190),i=n(16833),a=!0;t.default=(0,r.Z)((0,i.Z)(()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Function Currying"}),(0,o.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,o.jsx)(s.Y3,{activeQuestionIndex:13,totalQuestions:20,index:13,question:"What pattern does this code implement?",options:["Factory pattern","Singleton pattern","Observer pattern","Curried logger pattern"],code:"const logLevel = (level) => (message) => {\n  console.log(`[${level}] ${message}`);\n};\n\nconst logInfo = logLevel('INFO');\nconst logError = logLevel('ERROR');\n\nlogInfo('User logged in');\nlogError('Failed to connect to database');",nextQuestionPath:"what-is-the-result-of-executing-this-code",correctAnswer:4,explanation:"This code implements a 'Curried logger pattern'. The `logLevel` function is curried to take a log level first and return a specialized logger function that only needs a message. This creates a family of logging functions, each preconfigured with a specific log level. Here, we create `logInfo` and `logError` functions that add the appropriate level prefix to their messages. This pattern is useful when you need multiple variations of a function with some parameters fixed. It demonstrates how currying can create a clean API for related functionality, allowing consumers to choose the appropriate specialized function for their needs without repeating the log level each time.",id:320,quizId:14},13)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=31050)}),_N_E=e.O()}]);