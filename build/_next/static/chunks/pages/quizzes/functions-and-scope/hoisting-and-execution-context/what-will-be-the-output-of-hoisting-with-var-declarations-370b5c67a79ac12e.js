(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[44272],{64982:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/functions-and-scope/hoisting-and-execution-context/what-will-be-the-output-of-hoisting-with-var-declarations",function(){return n(38488)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var i=n(85893),o=n(67294),s=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:s="auto",className:a,fullWidthResponsive:r="true",style:d={}}=e,c=(0,o.useRef)(null),l=(0,o.useRef)(!1),[u,h]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(h(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(u){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))c.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{c.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[u]),u)?(0,i.jsx)("ins",{ref:c,className:"adsbygoogle ".concat(a),style:{display:"block",...d},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":s,"data-full-width-responsive":r}):null};function a(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,i.jsx)("div",{children:(0,i.jsx)(s,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,i.jsx)("div",{children:(0,i.jsx)(e,{...this.props})}),(0,i.jsx)("div",{children:(0,i.jsx)(s,{adSlot:"6208304795",className:"h-[100px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},38488:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return r}});var i=n(85893),o=n(1475),s=n(25190),a=n(16833),r=!0;t.default=(0,s.Z)((0,a.Z)(()=>(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Hoisting and Execution Context"}),(0,i.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,i.jsx)(o.Y3,{activeQuestionIndex:1,totalQuestions:20,index:1,question:"What will be the output of hoisting with var declarations?",options:["5","undefined","null","ReferenceError: x is not defined"],code:"console.log(x);\nvar x = 5;",nextQuestionPath:"how-does-the-temporal-dead-zone-affect-accessing-let-variables",correctAnswer:2,explanation:"The output will be `undefined`. This demonstrates how hoisting works with `var` declarations. During the compilation phase, the declaration `var x;` is hoisted to the top of its scope, but the initialization `x = 5;` remains in its original position. So, the code effectively runs as if it were written:\n```javascript\nvar x; // x is declared but not initialized, so its value is undefined\nconsole.log(x); // logs undefined\nx = 5; // x is assigned the value 5\n```\nThis behavior is specific to variables declared with `var`. It's one of the reasons why modern JavaScript often prefers `let` and `const` declarations, which are hoisted but remain in a 'temporal dead zone' until their actual declaration line, causing a ReferenceError if accessed before declaration rather than returning `undefined`.",id:243,quizId:11},1)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=64982)}),_N_E=e.O()}]);