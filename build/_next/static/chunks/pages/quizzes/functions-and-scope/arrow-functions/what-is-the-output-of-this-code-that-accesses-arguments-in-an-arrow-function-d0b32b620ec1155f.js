(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[71398],{69365:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/quizzes/functions-and-scope/arrow-functions/what-is-the-output-of-this-code-that-accesses-arguments-in-an-arrow-function",function(){return n(90460)}])},16833:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var s=n(85893),o=n(67294),r=e=>{let{adClient:t="ca-pub-7544108447932228",adSlot:n="6753219060",adFormat:r="auto",className:a,fullWidthResponsive:i="true",style:c={}}=e,u=(0,o.useRef)(null),l=(0,o.useRef)(!1),[d,h]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(h(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{if(d){if(document.querySelector('script[src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"]'))u.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0);else{let e=document.createElement("script");e.src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7544108447932228",e.async=!0,e.crossOrigin="anonymous",document.body.appendChild(e),e.onload=()=>{u.current&&!l.current&&((window.adsbygoogle=window.adsbygoogle||[]).push({}),l.current=!0)}}}},[d]),d)?(0,s.jsx)("ins",{ref:u,className:"adsbygoogle ".concat(a),style:{display:"block",...c},"data-ad-client":t,"data-ad-slot":n,"data-ad-format":r,"data-full-width-responsive":i}):null};function a(e){return class extends o.Component{componentDidMount(){console.log("Wrapped Component")}render(){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[(0,s.jsx)("div",{children:(0,s.jsx)(r,{adSlot:"6753219060",className:"h-[100px] md:h-full top-0 sticky"})}),(0,s.jsx)("div",{children:(0,s.jsx)(e,{...this.props})}),(0,s.jsx)("div",{children:(0,s.jsx)(r,{adSlot:"6208304795",className:"h-[100px] md:h-full top-0 sticky"})})]})})}constructor(e){super(e)}}}},90460:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return i}});var s=n(85893),o=n(1475),r=n(25190),a=n(16833),i=!0;t.default=(0,r.Z)((0,a.Z)(()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h1",{className:"text-2xl dark:text-white text-center",children:"Arrow Functions"}),(0,s.jsx)("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:(0,s.jsx)(o.Y3,{activeQuestionIndex:16,totalQuestions:20,index:16,question:"What is the output of this code that accesses 'arguments' in an arrow function?",options:["[1, 2, 3]","{ '0': 1, '1': 2, '2': 3, length: 3 }","ReferenceError: arguments is not defined","undefined"],code:"const fn = () => arguments;\nconsole.log(fn(1, 2, 3));",nextQuestionPath:"when-using-an-arrow-function-with-a-single-parameter-which-syntax-feature-is-optional",correctAnswer:3,explanation:"This code will result in a ReferenceError: arguments is not defined (assuming this is running at the global scope). Arrow functions don't have their own `arguments` object, unlike regular functions. Instead, arrow functions inherit the `arguments` object from their enclosing lexical scope. When the arrow function is defined in the global scope, there is no `arguments` object to inherit, resulting in a ReferenceError when trying to access it. If this same arrow function were defined inside a regular function, it would access that function's `arguments` object. For example: `function outer() { const fn = () => arguments; return fn(); } console.log(outer(1, 2, 3));` would log the `arguments` object from `outer`. When working with arrow functions, it's generally better to use rest parameters instead of `arguments` for better clarity and to avoid these pitfalls: `const fn = (...args) => args;`. This creates a true array containing all arguments, which is easier to work with than the array-like `arguments` object.",id:217,quizId:9},16)})]})))}},function(e){e.O(0,[41966,25675,82893,92888,49774,40179],function(){return e(e.s=69365)}),_N_E=e.O()}]);