"use strict";(()=>{var e={};e.id=796,e.ids=[796,660],e.modules={4324:(e,t,r)=>{r.r(t),r.d(t,{config:()=>S,default:()=>f,getServerSideProps:()=>v,getStaticPaths:()=>b,getStaticProps:()=>x,reportWebVitals:()=>_,routeModule:()=>k,unstable_getServerProps:()=>P,unstable_getServerSideProps:()=>q,unstable_getStaticParams:()=>w,unstable_getStaticPaths:()=>j,unstable_getStaticProps:()=>y});var s={};r.r(s),r.d(s,{default:()=>g,getStaticProps:()=>h});var a=r(7093),n=r(5244),i=r(1323),l=r(2899),o=r.n(l),u=r(9413),c=r(997),d=r(4815),p=r(1354),m=r(6833);async function h(){let e=await r.e(1317).then(r.t.bind(r,1317,19));return{props:{siteName:e.default.name,google_analytics_tracking_id:e.default.google_analytics_tracking_id,google_adsense_publisher_id:e.default.google_adsense_publisher_id,title:"What will this code output? function sum(...numbers) { return numbers.reduce((total, n) => total + n, 0); } console.log(sum(1, 2, 3));",description:"Test your knowledge of JavaScript's destructuring assignment and spread syntax. Learn how to efficiently extract values from arrays and objects, copy collections, merge data structures, and use rest parameters in this comprehensive quiz."}}}let g=(0,p.Z)((0,m.Z)(()=>(0,c.jsxs)(c.Fragment,{children:[c.jsx("h1",{className:"text-2xl dark:text-white text-center",children:"Destructuring & Spread Operator"}),c.jsx("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:c.jsx(d.Y3,{activeQuestionIndex:16,totalQuestions:20,index:16,question:"What will this code output? function sum(...numbers) { return numbers.reduce((total, n) => total + n, 0); } console.log(sum(1, 2, 3));",options:["Error","6","[1, 2, 3]","undefined"],code:void 0,nextQuestionPath:"what-happens-when-you-try-to-destructure-a-null-or-undefined-value",correctAnswer:2,explanation:"This code will output `6`. The function `sum` uses the rest parameter syntax (`...numbers`) to collect all arguments passed to the function into an array called `numbers`. In this case, when calling `sum(1, 2, 3)`, the `numbers` array becomes `[1, 2, 3]`. The function then uses the `reduce` method to add up all numbers in the array, starting with an initial total of 0. The calculation is 0 + 1 = 1, then 1 + 2 = 3, then 3 + 3 = 6. The rest parameter syntax is perfect for variadic functions (functions that can accept any number of arguments). Unlike the older `arguments` object, the rest parameter gives you a real array with all array methods like `map`, `filter`, and `reduce` available. The rest parameter must be the last parameter in a function definition, as it collects all remaining arguments.",id:177,quizId:7},16)})]}))),f=(0,i.l)(s,"default"),x=(0,i.l)(s,"getStaticProps"),b=(0,i.l)(s,"getStaticPaths"),v=(0,i.l)(s,"getServerSideProps"),S=(0,i.l)(s,"config"),_=(0,i.l)(s,"reportWebVitals"),y=(0,i.l)(s,"unstable_getStaticProps"),j=(0,i.l)(s,"unstable_getStaticPaths"),w=(0,i.l)(s,"unstable_getStaticParams"),P=(0,i.l)(s,"unstable_getServerProps"),q=(0,i.l)(s,"unstable_getServerSideProps"),k=new a.PagesRouteModule({definition:{kind:n.x.PAGES,page:"/quizzes/javascript-basics/destructuring-and-spread/what-will-this-code-output-function-sum-numbers-return-numbers-reduce-total-n-total-n-0-console-log-sum-1-2-3",pathname:"/quizzes/javascript-basics/destructuring-and-spread/what-will-this-code-output-function-sum-numbers-return-numbers-reduce-total-n-total-n-0-console-log-sum-1-2-3",bundlePath:"",filename:""},components:{App:u.default,Document:o()},userland:s})},6833:(e,t,r)=>{r.d(t,{Z:()=>i});var s=r(997),a=r(6689);let n=({adClient:e="ca-pub-7544108447932228",adSlot:t="6753219060",className:r})=>{let n=(0,a.useRef)(null);(0,a.useRef)(!1);let[i,l]=(0,a.useState)(!1);return((0,a.useEffect)(()=>(l(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,a.useEffect)(()=>{},[i]),i)?s.jsx("ins",{ref:n,className:`adsbygoogle ${r}`,style:{display:"block"},"data-ad-client":e,"data-ad-slot":t}):null};function i(e){return class extends a.Component{constructor(e){super(e)}componentDidMount(){console.log("Wrapped Component")}render(){return s.jsx(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[s.jsx("div",{children:s.jsx(n,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),s.jsx("div",{children:s.jsx(e,{...this.props})}),s.jsx("div",{children:s.jsx(n,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}}}},9003:e=>{e.exports=require("classnames")},2785:e=>{e.exports=require("next/dist/compiled/next-server/pages.runtime.prod.js")},968:e=>{e.exports=require("next/head")},6689:e=>{e.exports=require("react")},6405:e=>{e.exports=require("react-dom")},997:e=>{e.exports=require("react/jsx-runtime")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},2781:e=>{e.exports=require("stream")},9796:e=>{e.exports=require("zlib")}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[2899,8559,5675,1163,2603],()=>r(4324));module.exports=s})();