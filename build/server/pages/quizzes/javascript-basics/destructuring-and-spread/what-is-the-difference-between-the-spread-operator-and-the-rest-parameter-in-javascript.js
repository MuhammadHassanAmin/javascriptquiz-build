"use strict";(()=>{var e={};e.id=131,e.ids=[131,660],e.modules={1684:(e,t,r)=>{r.r(t),r.d(t,{config:()=>v,default:()=>f,getServerSideProps:()=>S,getStaticPaths:()=>b,getStaticProps:()=>x,reportWebVitals:()=>y,routeModule:()=>k,unstable_getServerProps:()=>P,unstable_getServerSideProps:()=>q,unstable_getStaticParams:()=>_,unstable_getStaticPaths:()=>j,unstable_getStaticProps:()=>w});var a={};r.r(a),r.d(a,{default:()=>g,getStaticProps:()=>m});var s=r(7093),i=r(5244),n=r(1323),o=r(2899),l=r.n(o),d=r(9413),c=r(997),p=r(1475),u=r(1354),h=r(6833);async function m(){let e=await r.e(1317).then(r.t.bind(r,1317,19));return{props:{siteName:e.default.name,google_analytics_tracking_id:e.default.google_analytics_tracking_id,google_adsense_publisher_id:e.default.google_adsense_publisher_id,title:"What is the difference between the spread operator and the rest parameter in JavaScript?",description:"Test your knowledge of JavaScript's destructuring assignment and spread syntax. Learn how to efficiently extract values from arrays and objects, copy collections, merge data structures, and use rest parameters in this comprehensive quiz."}}}let g=(0,u.Z)((0,h.Z)(()=>(0,c.jsxs)(c.Fragment,{children:[c.jsx("h1",{className:"text-2xl dark:text-white text-center",children:"Destructuring & Spread Operator"}),c.jsx("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:c.jsx(p.Y3,{activeQuestionIndex:6,totalQuestions:20,index:6,question:"What is the difference between the spread operator and the rest parameter in JavaScript?",options:["They are the same thing, just used in different contexts","Spread expands elements, while rest collects them into an array","Spread is used with objects, while rest is used with arrays","Spread is ES6, while rest was introduced in ES7"],code:void 0,nextQuestionPath:"how-can-you-use-destructuring-to-swap-two-variables-without-a-temporary-variable",correctAnswer:2,explanation:"The key difference is that the spread operator expands elements, while the rest parameter collects them into an array. Though they both use the same `...` syntax, they serve opposite purposes. The spread operator is used in function calls, array literals, or object literals to expand elements from an iterable (like an array) or properties from an object. For example: `fn(...array)` or `[1, 2, ...array]`. The rest parameter is used in function parameters or destructuring assignments to collect multiple elements into a single array. For example: `function fn(...args) {}` or `const [first, ...others] = array;`. You can think of spread as unpacking a collection, while rest is packing multiple items into a collection. Both were introduced in ES6, but with different purposes and in different contexts. The ability to spread was extended to objects in ES2018.",id:167,quizId:7},6)})]}))),f=(0,n.l)(a,"default"),x=(0,n.l)(a,"getStaticProps"),b=(0,n.l)(a,"getStaticPaths"),S=(0,n.l)(a,"getServerSideProps"),v=(0,n.l)(a,"config"),y=(0,n.l)(a,"reportWebVitals"),w=(0,n.l)(a,"unstable_getStaticProps"),j=(0,n.l)(a,"unstable_getStaticPaths"),_=(0,n.l)(a,"unstable_getStaticParams"),P=(0,n.l)(a,"unstable_getServerProps"),q=(0,n.l)(a,"unstable_getServerSideProps"),k=new s.PagesRouteModule({definition:{kind:i.x.PAGES,page:"/quizzes/javascript-basics/destructuring-and-spread/what-is-the-difference-between-the-spread-operator-and-the-rest-parameter-in-javascript",pathname:"/quizzes/javascript-basics/destructuring-and-spread/what-is-the-difference-between-the-spread-operator-and-the-rest-parameter-in-javascript",bundlePath:"",filename:""},components:{App:d.default,Document:l()},userland:a})},6833:(e,t,r)=>{r.d(t,{Z:()=>n});var a=r(997),s=r(6689);let i=({adClient:e="ca-pub-7544108447932228",adSlot:t="6753219060",className:r})=>{let i=(0,s.useRef)(null);(0,s.useRef)(!1);let[n,o]=(0,s.useState)(!1);return((0,s.useEffect)(()=>(o(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,s.useEffect)(()=>{},[n]),n)?a.jsx("ins",{ref:i,className:`adsbygoogle ${r}`,style:{display:"block"},"data-ad-client":e,"data-ad-slot":t}):null};function n(e){return class extends s.Component{constructor(e){super(e)}componentDidMount(){console.log("Wrapped Component")}render(){return a.jsx(a.Fragment,{children:(0,a.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[a.jsx("div",{children:a.jsx(i,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),a.jsx("div",{children:a.jsx(e,{...this.props})}),a.jsx("div",{children:a.jsx(i,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}}}},9003:e=>{e.exports=require("classnames")},2785:e=>{e.exports=require("next/dist/compiled/next-server/pages.runtime.prod.js")},968:e=>{e.exports=require("next/head")},6689:e=>{e.exports=require("react")},6405:e=>{e.exports=require("react-dom")},997:e=>{e.exports=require("react/jsx-runtime")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},2781:e=>{e.exports=require("stream")},9796:e=>{e.exports=require("zlib")}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[2899,8559,5675,1163,7830],()=>r(1684));module.exports=a})();