"use strict";(()=>{var e={};e.id=3372,e.ids=[3372,660],e.modules={2427:(e,t,a)=>{a.r(t),a.d(t,{config:()=>w,default:()=>m,getServerSideProps:()=>f,getStaticPaths:()=>v,getStaticProps:()=>b,reportWebVitals:()=>S,routeModule:()=>q,unstable_getServerProps:()=>z,unstable_getServerSideProps:()=>y,unstable_getStaticParams:()=>j,unstable_getStaticPaths:()=>P,unstable_getStaticProps:()=>_});var i={};a.r(i),a.d(i,{default:()=>g,getStaticProps:()=>x});var r=a(7093),n=a(5244),s=a(1323),o=a(2899),l=a.n(o),d=a(9413),c=a(997),u=a(4815),h=a(1354),p=a(6833);async function x(){let e=await a.e(1317).then(a.t.bind(a,1317,19));return{props:{siteName:e.default.name,google_analytics_tracking_id:e.default.google_analytics_tracking_id,google_adsense_publisher_id:e.default.google_adsense_publisher_id,title:"What is the temporal dead zone (TDZ) in JavaScript?",description:"Test your knowledge of JavaScript's hoisting behavior and execution context. Learn how variables and functions are processed during the creation phase, how the scope chain works, and why temporal dead zone matters in modern JavaScript."}}}let g=(0,h.Z)((0,p.Z)(()=>(0,c.jsxs)(c.Fragment,{children:[c.jsx("h1",{className:"text-2xl dark:text-white text-center",children:"Hoisting and Execution Context"}),c.jsx("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:c.jsx(u.Y3,{activeQuestionIndex:6,totalQuestions:20,index:6,question:"What is the temporal dead zone (TDZ) in JavaScript?",options:["The area in memory where deleted variables are stored","The time period when the JavaScript engine is idle","The period between entering scope and the variable declaration being reached","A region in the code where asynchronous operations are suspended"],code:void 0,nextQuestionPath:"what-will-be-the-output-of-this-code",correctAnswer:3,explanation:"The temporal dead zone (TDZ) is the period between entering a scope where a variable is defined with `let` or `const` and the point where the variable declaration is actually reached during execution. During this zone, the variable exists but cannot be accessed or used in any way. Any attempt to access the variable within the TDZ will result in a ReferenceError. For example:\n```javascript\n{\n  // TDZ for x starts here\n  console.log(x); // ReferenceError: Cannot access 'x' before initialization\n  let x = 5; // TDZ ends for x\n  console.log(x); // 5 (works fine)\n}\n```\nThe TDZ was introduced with the `let` and `const` declarations in ES6 to help catch programming errors. Unlike variables declared with `var` (which are initialized with `undefined` when hoisted), `let` and `const` variables remain uninitialized within the TDZ. This behavior makes it easier to spot potential issues with variable access before proper initialization, which helps write safer code with fewer unexpected behaviors.",id:248,quizId:11},6)})]}))),m=(0,s.l)(i,"default"),b=(0,s.l)(i,"getStaticProps"),v=(0,s.l)(i,"getStaticPaths"),f=(0,s.l)(i,"getServerSideProps"),w=(0,s.l)(i,"config"),S=(0,s.l)(i,"reportWebVitals"),_=(0,s.l)(i,"unstable_getStaticProps"),P=(0,s.l)(i,"unstable_getStaticPaths"),j=(0,s.l)(i,"unstable_getStaticParams"),z=(0,s.l)(i,"unstable_getServerProps"),y=(0,s.l)(i,"unstable_getServerSideProps"),q=new r.PagesRouteModule({definition:{kind:n.x.PAGES,page:"/quizzes/functions-and-scope/hoisting-and-execution-context/what-is-the-temporal-dead-zone-tdz-in-javascript",pathname:"/quizzes/functions-and-scope/hoisting-and-execution-context/what-is-the-temporal-dead-zone-tdz-in-javascript",bundlePath:"",filename:""},components:{App:d.default,Document:l()},userland:i})},6833:(e,t,a)=>{a.d(t,{Z:()=>s});var i=a(997),r=a(6689);let n=({adClient:e="ca-pub-7544108447932228",adSlot:t="6753219060",className:a})=>{let n=(0,r.useRef)(null);(0,r.useRef)(!1);let[s,o]=(0,r.useState)(!1);return((0,r.useEffect)(()=>(o(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,r.useEffect)(()=>{},[s]),s)?i.jsx("ins",{ref:n,className:`adsbygoogle ${a}`,style:{display:"block"},"data-ad-client":e,"data-ad-slot":t}):null};function s(e){return class extends r.Component{constructor(e){super(e)}componentDidMount(){console.log("Wrapped Component")}render(){return i.jsx(i.Fragment,{children:(0,i.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[i.jsx("div",{children:i.jsx(n,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),i.jsx("div",{children:i.jsx(e,{...this.props})}),i.jsx("div",{children:i.jsx(n,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}}}},9003:e=>{e.exports=require("classnames")},2785:e=>{e.exports=require("next/dist/compiled/next-server/pages.runtime.prod.js")},968:e=>{e.exports=require("next/head")},6689:e=>{e.exports=require("react")},6405:e=>{e.exports=require("react-dom")},997:e=>{e.exports=require("react/jsx-runtime")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},2781:e=>{e.exports=require("stream")},9796:e=>{e.exports=require("zlib")}};var t=require("../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),i=t.X(0,[2899,8559,5675,1163,2603],()=>a(2427));module.exports=i})();