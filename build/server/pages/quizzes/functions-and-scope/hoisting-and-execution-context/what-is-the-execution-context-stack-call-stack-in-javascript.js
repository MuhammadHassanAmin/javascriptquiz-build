"use strict";(()=>{var e={};e.id=5324,e.ids=[5324,660],e.modules={3089:(e,t,n)=>{n.r(t),n.d(t,{config:()=>S,default:()=>g,getServerSideProps:()=>b,getStaticPaths:()=>v,getStaticProps:()=>m,reportWebVitals:()=>k,routeModule:()=>q,unstable_getServerProps:()=>j,unstable_getServerSideProps:()=>y,unstable_getStaticParams:()=>_,unstable_getStaticPaths:()=>P,unstable_getStaticProps:()=>w});var s={};n.r(s),n.d(s,{default:()=>f,getStaticProps:()=>x});var o=n(7093),a=n(5244),i=n(1323),r=n(2899),c=n.n(r),l=n(9413),u=n(997),d=n(1475),p=n(1354),h=n(6833);async function x(){let e=await n.e(1317).then(n.t.bind(n,1317,19));return{props:{siteName:e.default.name,google_analytics_tracking_id:e.default.google_analytics_tracking_id,google_adsense_publisher_id:e.default.google_adsense_publisher_id,title:"What is the execution context stack (call stack) in JavaScript?",description:"Test your knowledge of JavaScript's hoisting behavior and execution context. Learn how variables and functions are processed during the creation phase, how the scope chain works, and why temporal dead zone matters in modern JavaScript."}}}let f=(0,p.Z)((0,h.Z)(()=>(0,u.jsxs)(u.Fragment,{children:[u.jsx("h1",{className:"text-2xl dark:text-white text-center",children:"Hoisting and Execution Context"}),u.jsx("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:u.jsx(d.Y3,{activeQuestionIndex:18,totalQuestions:20,index:18,question:"What is the execution context stack (call stack) in JavaScript?",options:["A list of all available variables in the current scope","A mechanism for storing function parameters and return values","A data structure that tracks the execution of functions in a LIFO order","A way to organize global variables in memory"],code:void 0,nextQuestionPath:"what-will-be-the-output-of-this-code",correctAnswer:3,explanation:"The execution context stack, commonly known as the call stack, is a data structure that tracks the execution of functions in a Last-In-First-Out (LIFO) order. It works as follows:\n\n1. When JavaScript starts executing code, it creates a global execution context and pushes it onto the stack.\n\n2. When a function is called, a new execution context is created for that function and pushed onto the top of the stack.\n\n3. When the current function completes, its execution context is popped off the stack, and control returns to the context below it.\n\n4. This process continues until the stack is empty.\n\nFor example, consider this code:\n```javascript\nfunction first() {\n  console.log('First function');\n  second();\n  console.log('Back to first');\n}\n\nfunction second() {\n  console.log('Second function');\n}\n\nfirst();\n```\n\nHere's how the call stack would change:\n1. Push global execution context\n2. Call `first()` → Push `first`'s execution context\n3. Log 'First function'\n4. Call `second()` → Push `second`'s execution context\n5. Log 'Second function'\n6. `second()` completes → Pop `second`'s execution context\n7. Log 'Back to first'\n8. `first()` completes → Pop `first`'s execution context\n9. Global code completes → Pop global execution context\n\nThe call stack has a limited size, which is why deeply nested function calls or infinite recursion can lead to a 'stack overflow' error.",id:260,quizId:11},18)})]}))),g=(0,i.l)(s,"default"),m=(0,i.l)(s,"getStaticProps"),v=(0,i.l)(s,"getStaticPaths"),b=(0,i.l)(s,"getServerSideProps"),S=(0,i.l)(s,"config"),k=(0,i.l)(s,"reportWebVitals"),w=(0,i.l)(s,"unstable_getStaticProps"),P=(0,i.l)(s,"unstable_getStaticPaths"),_=(0,i.l)(s,"unstable_getStaticParams"),j=(0,i.l)(s,"unstable_getServerProps"),y=(0,i.l)(s,"unstable_getServerSideProps"),q=new o.PagesRouteModule({definition:{kind:a.x.PAGES,page:"/quizzes/functions-and-scope/hoisting-and-execution-context/what-is-the-execution-context-stack-call-stack-in-javascript",pathname:"/quizzes/functions-and-scope/hoisting-and-execution-context/what-is-the-execution-context-stack-call-stack-in-javascript",bundlePath:"",filename:""},components:{App:l.default,Document:c()},userland:s})},6833:(e,t,n)=>{n.d(t,{Z:()=>i});var s=n(997),o=n(6689);let a=({adClient:e="ca-pub-7544108447932228",adSlot:t="6753219060",className:n})=>{let a=(0,o.useRef)(null);(0,o.useRef)(!1);let[i,r]=(0,o.useState)(!1);return((0,o.useEffect)(()=>(r(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,o.useEffect)(()=>{},[i]),i)?s.jsx("ins",{ref:a,className:`adsbygoogle ${n}`,style:{display:"block"},"data-ad-client":e,"data-ad-slot":t}):null};function i(e){return class extends o.Component{constructor(e){super(e)}componentDidMount(){console.log("Wrapped Component")}render(){return s.jsx(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[s.jsx("div",{children:s.jsx(a,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),s.jsx("div",{children:s.jsx(e,{...this.props})}),s.jsx("div",{children:s.jsx(a,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}}}},9003:e=>{e.exports=require("classnames")},2785:e=>{e.exports=require("next/dist/compiled/next-server/pages.runtime.prod.js")},968:e=>{e.exports=require("next/head")},6689:e=>{e.exports=require("react")},6405:e=>{e.exports=require("react-dom")},997:e=>{e.exports=require("react/jsx-runtime")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},2781:e=>{e.exports=require("stream")},9796:e=>{e.exports=require("zlib")}};var t=require("../../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),s=t.X(0,[2899,8559,5675,1163,7830],()=>n(3089));module.exports=s})();