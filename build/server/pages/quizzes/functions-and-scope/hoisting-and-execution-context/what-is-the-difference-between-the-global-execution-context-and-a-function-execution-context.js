"use strict";(()=>{var e={};e.id=1169,e.ids=[1169,660],e.modules={7999:(e,t,n)=>{n.r(t),n.d(t,{config:()=>v,default:()=>g,getServerSideProps:()=>w,getStaticPaths:()=>m,getStaticProps:()=>b,reportWebVitals:()=>S,routeModule:()=>k,unstable_getServerProps:()=>j,unstable_getServerSideProps:()=>q,unstable_getStaticParams:()=>P,unstable_getStaticPaths:()=>_,unstable_getStaticProps:()=>y});var o={};n.r(o),n.d(o,{default:()=>f,getStaticProps:()=>p});var a=n(7093),i=n(5244),s=n(1323),r=n(2899),c=n.n(r),l=n(9413),d=n(997),u=n(1475),h=n(1354),x=n(6833);async function p(){let e=await n.e(1317).then(n.t.bind(n,1317,19));return{props:{siteName:e.default.name,google_analytics_tracking_id:e.default.google_analytics_tracking_id,google_adsense_publisher_id:e.default.google_adsense_publisher_id,title:"What is the difference between the global execution context and a function execution context?",description:"Test your knowledge of JavaScript's hoisting behavior and execution context. Learn how variables and functions are processed during the creation phase, how the scope chain works, and why temporal dead zone matters in modern JavaScript."}}}let f=(0,h.Z)((0,x.Z)(()=>(0,d.jsxs)(d.Fragment,{children:[d.jsx("h1",{className:"text-2xl dark:text-white text-center",children:"Hoisting and Execution Context"}),d.jsx("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:d.jsx(u.Y3,{activeQuestionIndex:14,totalQuestions:20,index:14,question:"What is the difference between the global execution context and a function execution context?",options:["Function contexts have access to local variables, while the global context only has global variables","The global context exists for the entire program duration, while function contexts are created and destroyed during function calls","The global context has a 'window' binding for 'this', while function contexts have 'undefined' for 'this'","The global context processes code synchronously, while function contexts can run asynchronously"],code:void 0,nextQuestionPath:"what-will-this-code-output",correctAnswer:2,explanation:"The key difference between the global execution context and a function execution context is that the global context exists for the entire program duration, while function contexts are created and destroyed during function calls. Here are the main distinctions:\n\n1. Creation and Lifecycle:\n   - The global execution context is created when the script first loads and remains until the program ends.\n   - Function execution contexts are created whenever a function is called and destroyed when the function completes execution.\n\n2. Variable Environment:\n   - The global context contains globally defined variables and functions.\n   - Function contexts have their own local variables, parameters, and any variables and functions defined inside them.\n\n3. 'this' Binding:\n   - In the global context, 'this' typically refers to the global object (window in browsers, global in Node.js).\n   - In function contexts, 'this' is determined by how the function is called (the call site).\n\n4. Call Stack Position:\n   - The global context forms the base of the call stack.\n   - Function contexts are pushed onto the stack when functions are called and popped off when they complete.\n\nUnderstanding these differences is crucial for reasoning about variable scope, the behavior of 'this', and how JavaScript manages memory during program execution.",id:256,quizId:11},14)})]}))),g=(0,s.l)(o,"default"),b=(0,s.l)(o,"getStaticProps"),m=(0,s.l)(o,"getStaticPaths"),w=(0,s.l)(o,"getServerSideProps"),v=(0,s.l)(o,"config"),S=(0,s.l)(o,"reportWebVitals"),y=(0,s.l)(o,"unstable_getStaticProps"),_=(0,s.l)(o,"unstable_getStaticPaths"),P=(0,s.l)(o,"unstable_getStaticParams"),j=(0,s.l)(o,"unstable_getServerProps"),q=(0,s.l)(o,"unstable_getServerSideProps"),k=new a.PagesRouteModule({definition:{kind:i.x.PAGES,page:"/quizzes/functions-and-scope/hoisting-and-execution-context/what-is-the-difference-between-the-global-execution-context-and-a-function-execution-context",pathname:"/quizzes/functions-and-scope/hoisting-and-execution-context/what-is-the-difference-between-the-global-execution-context-and-a-function-execution-context",bundlePath:"",filename:""},components:{App:l.default,Document:c()},userland:o})},6833:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(997),a=n(6689);let i=({adClient:e="ca-pub-7544108447932228",adSlot:t="6753219060",className:n})=>{let i=(0,a.useRef)(null);(0,a.useRef)(!1);let[s,r]=(0,a.useState)(!1);return((0,a.useEffect)(()=>(r(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,a.useEffect)(()=>{},[s]),s)?o.jsx("ins",{ref:i,className:`adsbygoogle ${n}`,style:{display:"block"},"data-ad-client":e,"data-ad-slot":t}):null};function s(e){return class extends a.Component{constructor(e){super(e)}componentDidMount(){console.log("Wrapped Component")}render(){return o.jsx(o.Fragment,{children:(0,o.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[o.jsx("div",{children:o.jsx(i,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),o.jsx("div",{children:o.jsx(e,{...this.props})}),o.jsx("div",{children:o.jsx(i,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}}}},9003:e=>{e.exports=require("classnames")},2785:e=>{e.exports=require("next/dist/compiled/next-server/pages.runtime.prod.js")},968:e=>{e.exports=require("next/head")},6689:e=>{e.exports=require("react")},6405:e=>{e.exports=require("react-dom")},997:e=>{e.exports=require("react/jsx-runtime")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},2781:e=>{e.exports=require("stream")},9796:e=>{e.exports=require("zlib")}};var t=require("../../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),o=t.X(0,[2899,8559,5675,1163,7830],()=>n(7999));module.exports=o})();