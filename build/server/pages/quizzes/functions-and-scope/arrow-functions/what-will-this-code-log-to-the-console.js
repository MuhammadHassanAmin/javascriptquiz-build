"use strict";(()=>{var e={};e.id=8697,e.ids=[8697,660],e.modules={3521:(e,t,n)=>{n.r(t),n.d(t,{config:()=>v,default:()=>m,getServerSideProps:()=>w,getStaticPaths:()=>b,getStaticProps:()=>x,reportWebVitals:()=>S,routeModule:()=>N,unstable_getServerProps:()=>y,unstable_getServerSideProps:()=>q,unstable_getStaticParams:()=>j,unstable_getStaticPaths:()=>P,unstable_getStaticProps:()=>_});var s={};n.r(s),n.d(s,{default:()=>f,getStaticProps:()=>g});var r=n(7093),o=n(5244),i=n(1323),a=n(2899),l=n.n(a),c=n(9413),u=n(997),d=n(4815),h=n(1354),p=n(6833);async function g(){let e=await n.e(1317).then(n.t.bind(n,1317,19));return{props:{siteName:e.default.name,google_analytics_tracking_id:e.default.google_analytics_tracking_id,google_adsense_publisher_id:e.default.google_adsense_publisher_id,title:"What will this code log to the console?",description:"Test your knowledge of JavaScript's arrow functions (lambda expressions) in this comprehensive quiz. Learn about concise syntax, lexical this binding, implicit returns, and when to use arrow functions versus traditional function expressions."}}}let f=(0,h.Z)((0,p.Z)(()=>(0,u.jsxs)(u.Fragment,{children:[u.jsx("h1",{className:"text-2xl dark:text-white text-center",children:"Arrow Functions"}),u.jsx("div",{className:"flex justify-center w-full p-5 md:p-0 pt-0",children:u.jsx(d.Y3,{activeQuestionIndex:10,totalQuestions:20,index:10,question:"What will this code log to the console?",options:["NaN, NaN, NaN... (repeatedly)","1, 2, 3... (incrementing each second)","TypeError: Cannot read property 'count' of undefined","0, 0, 0... (repeatedly)"],code:"const counter = {\n  count: 0,\n  increment: function() {\n    setInterval(() => {\n      console.log(++this.count);\n    }, 1000);\n  }\n};\n\ncounter.increment();",nextQuestionPath:"which-of-the-following-statements-about-arrow-functions-is-false",correctAnswer:2,explanation:"This code will log `1, 2, 3...` incrementing each second. It demonstrates a practical use case for arrow functionsâ€”maintaining the correct `this` context in callbacks. In the `increment` method (a regular function), `this` refers to the `counter` object. The arrow function inside `setInterval` inherits this same `this` value because arrow functions don't have their own `this` binding. Each second, the callback executes, incrementing and logging the counter's `count` property. If a regular function were used instead (`setInterval(function() { console.log(++this.count); }, 1000)`), `this` inside that function would refer to the global object (or be `undefined` in strict mode), not the counter object. This would cause `this.count` to be `NaN` or throw an error. Before arrow functions, developers had to use workarounds like `var self = this` or `.bind(this)` to solve this problem. This example shows why arrow functions are particularly valuable for callbacks, event handlers, and other scenarios where preserving the lexical `this` is important.",id:211,quizId:9},10)})]}))),m=(0,i.l)(s,"default"),x=(0,i.l)(s,"getStaticProps"),b=(0,i.l)(s,"getStaticPaths"),w=(0,i.l)(s,"getServerSideProps"),v=(0,i.l)(s,"config"),S=(0,i.l)(s,"reportWebVitals"),_=(0,i.l)(s,"unstable_getStaticProps"),P=(0,i.l)(s,"unstable_getStaticPaths"),j=(0,i.l)(s,"unstable_getStaticParams"),y=(0,i.l)(s,"unstable_getServerProps"),q=(0,i.l)(s,"unstable_getServerSideProps"),N=new r.PagesRouteModule({definition:{kind:o.x.PAGES,page:"/quizzes/functions-and-scope/arrow-functions/what-will-this-code-log-to-the-console",pathname:"/quizzes/functions-and-scope/arrow-functions/what-will-this-code-log-to-the-console",bundlePath:"",filename:""},components:{App:c.default,Document:l()},userland:s})},6833:(e,t,n)=>{n.d(t,{Z:()=>i});var s=n(997),r=n(6689);let o=({adClient:e="ca-pub-7544108447932228",adSlot:t="6753219060",className:n})=>{let o=(0,r.useRef)(null);(0,r.useRef)(!1);let[i,a]=(0,r.useState)(!1);return((0,r.useEffect)(()=>(a(!0),()=>{let e=document.getElementById("__next");e&&e.removeAttribute("style")}),[]),(0,r.useEffect)(()=>{},[i]),i)?s.jsx("ins",{ref:o,className:`adsbygoogle ${n}`,style:{display:"block"},"data-ad-client":e,"data-ad-slot":t}):null};function i(e){return class extends r.Component{constructor(e){super(e)}componentDidMount(){console.log("Wrapped Component")}render(){return s.jsx(s.Fragment,{children:(0,s.jsxs)("div",{className:" md:grid grid-cols-[20%_60%_20%]  w-[95%] ",children:[s.jsx("div",{children:s.jsx(o,{adSlot:"6753219060",className:"h-[100px] md:h-full"})}),s.jsx("div",{children:s.jsx(e,{...this.props})}),s.jsx("div",{children:s.jsx(o,{adSlot:"2871546317",className:"h-[300px] md:h-full"})})]})})}}}},9003:e=>{e.exports=require("classnames")},2785:e=>{e.exports=require("next/dist/compiled/next-server/pages.runtime.prod.js")},968:e=>{e.exports=require("next/head")},6689:e=>{e.exports=require("react")},6405:e=>{e.exports=require("react-dom")},997:e=>{e.exports=require("react/jsx-runtime")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},2781:e=>{e.exports=require("stream")},9796:e=>{e.exports=require("zlib")}};var t=require("../../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),s=t.X(0,[2899,8559,5675,1163,2603],()=>n(3521));module.exports=s})();